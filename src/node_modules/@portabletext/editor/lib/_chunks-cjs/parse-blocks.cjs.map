{"version":3,"file":"parse-blocks.cjs","sources":["../../src/internal-utils/asserters.ts","../../src/internal-utils/parse-blocks.ts"],"sourcesContent":["import type {TypedObject} from '@sanity/types'\n\nexport function isTypedObject(object: unknown): object is TypedObject {\n  return isRecord(object) && typeof object._type === 'string'\n}\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return !!value && (typeof value === 'object' || typeof value === 'function')\n}\n","import type {\n  PortableTextBlock,\n  PortableTextObject,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport type {EditorSchema} from '../editor/define-schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {isTypedObject} from './asserters'\n\nexport function parseBlocks({\n  context,\n  blocks,\n  options,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  blocks: unknown\n  options: {\n    refreshKeys: boolean\n  }\n}): Array<PortableTextBlock> {\n  if (!Array.isArray(blocks)) {\n    return []\n  }\n\n  return blocks.flatMap((block) => {\n    const parsedBlock = parseBlock({context, block, options})\n\n    return parsedBlock ? [parsedBlock] : []\n  })\n}\n\nexport function parseBlock({\n  context,\n  block,\n  options,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  block: unknown\n  options: {\n    refreshKeys: boolean\n  }\n}): PortableTextBlock | undefined {\n  return (\n    parseTextBlock({block, context, options}) ??\n    parseBlockObject({blockObject: block, context, options})\n  )\n}\n\nfunction parseBlockObject({\n  blockObject,\n  context,\n  options,\n}: {\n  blockObject: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(blockObject)) {\n    return undefined\n  }\n\n  if (\n    blockObject._type === context.schema.block.name ||\n    blockObject._type === 'block' ||\n    !context.schema.blockObjects.some(({name}) => name === blockObject._type)\n  ) {\n    return undefined\n  }\n\n  return {\n    ...blockObject,\n    _key: options.refreshKeys\n      ? context.keyGenerator()\n      : typeof blockObject._key === 'string'\n        ? blockObject._key\n        : context.keyGenerator(),\n  }\n}\n\nexport function isTextBlock(\n  schema: EditorSchema,\n  block: unknown,\n): block is PortableTextTextBlock {\n  return (\n    parseTextBlock({\n      block,\n      context: {schema, keyGenerator: () => ''},\n      options: {refreshKeys: false},\n    }) !== undefined\n  )\n}\n\nfunction parseTextBlock({\n  block,\n  context,\n  options,\n}: {\n  block: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean}\n}): PortableTextTextBlock | undefined {\n  if (!isTypedObject(block)) {\n    return undefined\n  }\n\n  if (block._type !== context.schema.block.name) {\n    return undefined\n  }\n\n  const _key = options.refreshKeys\n    ? context.keyGenerator()\n    : typeof block._key === 'string'\n      ? block._key\n      : context.keyGenerator()\n\n  const unparsedMarkDefs: Array<unknown> = Array.isArray(block.markDefs)\n    ? block.markDefs\n    : []\n  const markDefKeyMap = new Map<string, string>()\n  const markDefs = unparsedMarkDefs.flatMap((markDef) => {\n    if (!isTypedObject(markDef)) {\n      return []\n    }\n\n    if (typeof markDef._key !== 'string') {\n      return []\n    }\n\n    if (\n      context.schema.annotations.some(\n        (annotation) => annotation.name === markDef._type,\n      )\n    ) {\n      const _key = options.refreshKeys ? context.keyGenerator() : markDef._key\n      markDefKeyMap.set(markDef._key, _key)\n\n      return [\n        {\n          ...markDef,\n          _key,\n        },\n      ]\n    }\n\n    return []\n  })\n\n  const unparsedChildren: Array<unknown> = Array.isArray(block.children)\n    ? block.children\n    : []\n\n  const children = unparsedChildren\n    .map(\n      (child) =>\n        parseSpan({span: child, context, markDefKeyMap, options}) ??\n        parseInlineObject({inlineObject: child, context, options}),\n    )\n    .filter((child) => child !== undefined)\n\n  const parsedBlock: PortableTextTextBlock = {\n    // Spread the entire block to allow custom properties on it\n    ...block,\n    _key,\n    children:\n      children.length > 0\n        ? children\n        : [\n            {\n              _key: context.keyGenerator(),\n              _type: context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n    markDefs,\n  }\n\n  /**\n   * Reset text block .style if it's somehow set to an invalid type\n   */\n  if (\n    typeof parsedBlock.style !== 'string' ||\n    !context.schema.styles.find((style) => style.value === block.style)\n  ) {\n    const defaultStyle = context.schema.styles.at(0)?.value\n\n    if (defaultStyle !== undefined) {\n      parsedBlock.style = defaultStyle\n    } else {\n      delete parsedBlock.style\n    }\n  }\n\n  /**\n   * Reset text block .listItem if it's somehow set to an invalid type\n   */\n  if (\n    typeof parsedBlock.listItem !== 'string' ||\n    !context.schema.lists.find((list) => list.value === block.listItem)\n  ) {\n    delete parsedBlock.listItem\n  }\n\n  /**\n   * Reset text block .level if it's somehow set to an invalid type\n   */\n  if (typeof parsedBlock.level !== 'number') {\n    delete parsedBlock.level\n  }\n\n  return parsedBlock\n}\n\nexport function isSpan(\n  schema: EditorSchema,\n  child: PortableTextSpan | PortableTextObject,\n): child is PortableTextSpan {\n  return (\n    parseSpan({\n      span: child,\n      markDefKeyMap: new Map(),\n      context: {schema, keyGenerator: () => ''},\n      options: {refreshKeys: false},\n    }) !== undefined\n  )\n}\n\nexport function parseSpan({\n  span,\n  context,\n  markDefKeyMap,\n  options,\n}: {\n  span: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  markDefKeyMap: Map<string, string>\n  options: {refreshKeys: boolean}\n}): PortableTextSpan | undefined {\n  if (!isTypedObject(span)) {\n    return undefined\n  }\n\n  // In reality, the span schema name is always 'span', but we only the check here anyway\n  if (span._type !== context.schema.span.name || span._type !== 'span') {\n    return undefined\n  }\n\n  const unparsedMarks: Array<unknown> = Array.isArray(span.marks)\n    ? span.marks\n    : []\n  const marks = unparsedMarks.flatMap((mark) => {\n    if (typeof mark !== 'string') {\n      return []\n    }\n\n    const markDefKey = markDefKeyMap.get(mark)\n\n    if (markDefKey !== undefined) {\n      return [markDefKey]\n    }\n\n    if (\n      context.schema.decorators.some((decorator) => decorator.value === mark)\n    ) {\n      return [mark]\n    }\n\n    return []\n  })\n\n  return {\n    // Spread the entire span to allow custom properties on it\n    ...span,\n    _type: 'span',\n    _key: options.refreshKeys\n      ? context.keyGenerator()\n      : typeof span._key === 'string'\n        ? span._key\n        : context.keyGenerator(),\n    text: typeof span.text === 'string' ? span.text : '',\n    marks,\n  }\n}\n\nfunction parseInlineObject({\n  inlineObject,\n  context,\n  options,\n}: {\n  inlineObject: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(inlineObject)) {\n    return undefined\n  }\n\n  if (\n    inlineObject._type === context.schema.span.name ||\n    inlineObject._type === 'span' ||\n    // Respect the schema definition and don't parse inline objects that are not defined\n    !context.schema.inlineObjects.some(({name}) => name === inlineObject._type)\n  ) {\n    return undefined\n  }\n\n  return {\n    // Spread the entire inline object to allow custom properties on it\n    ...inlineObject,\n    _key: options.refreshKeys\n      ? context.keyGenerator()\n      : typeof inlineObject._key === 'string'\n        ? inlineObject._key\n        : context.keyGenerator(),\n  }\n}\n"],"names":["isTypedObject","object","isRecord","_type","value","parseBlocks","context","blocks","options","Array","isArray","flatMap","block","parsedBlock","parseBlock","parseTextBlock","parseBlockObject","blockObject","schema","name","blockObjects","some","_key","refreshKeys","keyGenerator","isTextBlock","undefined","unparsedMarkDefs","markDefs","markDefKeyMap","Map","markDef","annotations","annotation","set","children","map","child","parseSpan","span","parseInlineObject","inlineObject","filter","length","text","marks","style","styles","find","defaultStyle","at","listItem","lists","list","level","mark","markDefKey","get","decorators","decorator","inlineObjects"],"mappings":"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"}