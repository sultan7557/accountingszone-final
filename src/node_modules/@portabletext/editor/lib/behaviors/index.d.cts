import type {Patch} from '@portabletext/patches'
import type {
  ArraySchemaType,
  BlockDecoratorDefinition,
  BlockListDefinition,
  BlockStyleDefinition,
  ObjectSchemaType,
  Path,
  PortableTextChild,
  PortableTextListBlock,
  PortableTextObject,
  PortableTextSpan,
  PortableTextTextBlock,
} from '@sanity/types'
import {KeyedSegment, PortableTextBlock} from '@sanity/types'
import type {
  FocusEvent as FocusEvent_2,
  KeyboardEvent as KeyboardEvent_2,
} from 'react'
import type {Descendant, Operation} from 'slate'
import {TextUnit} from 'slate'
import type {DOMNode} from 'slate-dom'
import type {ReactEditor} from 'slate-react'
import {
  ActionArgs,
  ActionFunction,
  ActorRef,
  ActorRefFrom,
  ActorRefFromLogic,
  AnyActorLogic,
  AnyActorRef,
  AnyEventObject,
  ConditionalRequired,
  InputFrom,
  IsNotNever,
  MachineSnapshot,
  MetaObject,
  NonReducibleUnknown,
  RequiredLogicInput,
  StateMachine,
  StateValue,
  Values,
} from 'xstate'
import {GuardArgs} from 'xstate/guards'
import {
  BlockOffset,
  EditorSelection,
  PortableTextMemberSchemaTypes as PortableTextMemberSchemaTypes_2,
} from '..'
import {EventPosition} from '../internal-utils/event-position'
import {MIMEType} from '../internal-utils/mime-type'
import {PickFromUnion, StrictExtract} from '../type-utils'
import {BlockWithOptionalKey} from '../types/block-with-optional-key'
import {Behavior as Behavior_2} from './behavior.types.behavior'
import {
  CustomBehaviorEvent as CustomBehaviorEvent_2,
  InputBehaviorEvent,
  InsertPlacement,
  MouseBehaviorEvent,
  NativeBehaviorEvent as NativeBehaviorEvent_2,
} from './behavior.types.event'

declare type AbstractBehaviorEvent =
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'annotation.toggle'>
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'decorator.toggle'>
      decorator: string
      offsets?: {
        anchor: BlockOffset_2
        focus: BlockOffset_2
      }
    }
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'deserialize'>
      originEvent:
        | PickFromUnion_2<
            NativeBehaviorEvent,
            'type',
            'drag.drop' | 'clipboard.paste'
          >
        | InputBehaviorEvent_2
    }
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'serialize'>
      originEvent: PickFromUnion_2<
        NativeBehaviorEvent,
        'type',
        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      >
    }
  | {
      type: StrictExtract_2<
        AbstractBehaviorEventType,
        'deserialization.success'
      >
      mimeType: MIMEType_2
      data: Array<PortableTextBlock>
      originEvent:
        | PickFromUnion_2<
            NativeBehaviorEvent,
            'type',
            'drag.drop' | 'clipboard.paste'
          >
        | InputBehaviorEvent_2
    }
  | {
      type: StrictExtract_2<
        AbstractBehaviorEventType,
        'deserialization.failure'
      >
      mimeType: MIMEType_2
      reason: string
      originEvent:
        | PickFromUnion_2<
            NativeBehaviorEvent,
            'type',
            'drag.drop' | 'clipboard.paste'
          >
        | InputBehaviorEvent_2
    }
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'serialization.success'>
      mimeType: MIMEType_2
      data: string
      originEvent: PickFromUnion_2<
        NativeBehaviorEvent,
        'type',
        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      >
    }
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'serialization.failure'>
      mimeType: MIMEType_2
      reason: string
      originEvent: PickFromUnion_2<
        NativeBehaviorEvent,
        'type',
        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      >
    }
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'insert.blocks'>
      blocks: Array<PortableTextBlock>
      placement: InsertPlacement_2
    }
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'insert.break'>
    }
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'insert.soft break'>
    }
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'list item.add'>
      listItem: string
    }
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'list item.remove'>
      listItem: string
    }
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'list item.toggle'>
      listItem: string
    }
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'move.block down'>
      at: [KeyedSegment]
    }
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'move.block up'>
      at: [KeyedSegment]
    }
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'select.previous block'>
      select?: 'start' | 'end'
    }
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'select.next block'>
      select?: 'start' | 'end'
    }
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'style.add'>
      style: string
    }
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'style.remove'>
      style: string
    }
  | {
      type: StrictExtract_2<AbstractBehaviorEventType, 'style.toggle'>
      style: string
    }

declare type AbstractBehaviorEventNamespace =
  ExtractNamespace<AbstractBehaviorEventType>

declare type AbstractBehaviorEventType =
  (typeof abstractBehaviorEventTypes)[number]

/**************************************
 * Abstract events
 **************************************/
declare const abstractBehaviorEventTypes: readonly [
  'annotation.toggle',
  'decorator.toggle',
  'deserialize',
  'deserialization.success',
  'deserialization.failure',
  'insert.blocks',
  'insert.break',
  'insert.soft break',
  'list item.add',
  'list item.remove',
  'list item.toggle',
  'move.block down',
  'move.block up',
  'select.previous block',
  'select.next block',
  'serialize',
  'serialization.success',
  'serialization.failure',
  'style.add',
  'style.remove',
  'style.toggle',
]

/**
 * @beta
 */
export declare type Behavior<
  TBehaviorEventType extends
    | '*'
    | `${BehaviorEventTypeNamespace}.*`
    | BehaviorEvent['type'] =
    | '*'
    | `${BehaviorEventTypeNamespace}.*`
    | BehaviorEvent['type'],
  TGuardResponse = true,
  TBehaviorEvent extends
    ResolveBehaviorEvent<TBehaviorEventType> = ResolveBehaviorEvent<TBehaviorEventType>,
> = {
  /**
   * Editor Event that triggers this Behavior.
   */
  on: TBehaviorEventType
  /**
   * Predicate function that determines if the Behavior should be executed.
   * Returning a non-nullable value from the guard will pass the value to the
   * actions and execute them.
   */
  guard?: BehaviorGuard<TBehaviorEvent, TGuardResponse>
  /**
   * Array of Behavior Action sets.
   * Each set represents a step in the history stack.
   */
  actions: Array<BehaviorActionSet<TBehaviorEvent, TGuardResponse>>
}

/**
 * @beta
 */
export declare type BehaviorAction =
  | SyntheticBehaviorEvent
  | {
      type: 'raise'
      event:
        | AbstractBehaviorEvent
        | SyntheticBehaviorEvent
        | CustomBehaviorEvent
    }
  | {
      type: 'noop'
    }
  | {
      type: 'effect'
      effect: () => void
    }

/**
 * @beta
 */
export declare type BehaviorActionSet<TBehaviorEvent, TGuardResponse> = (
  payload: {
    /**
     * @deprecated
     * Use `snapshot` instead
     */
    context: EditorContext
    snapshot: EditorSnapshot
    event: TBehaviorEvent
  },
  guardResponse: TGuardResponse,
) => Array<BehaviorAction>

/**
 * @beta
 */
export declare type BehaviorEvent =
  | SyntheticBehaviorEvent
  | AbstractBehaviorEvent
  | NativeBehaviorEvent
  | CustomBehaviorEvent

declare type BehaviorEventTypeNamespace =
  | SyntheticBehaviorEventNamespace
  | AbstractBehaviorEventNamespace
  | NativeBehaviorEventNamespace
  | CustomBehaviorEventNamespace

/**
 * @beta
 */
export declare type BehaviorGuard<TBehaviorEvent, TGuardResponse> = (payload: {
  /**
   * @deprecated
   * Use `snapshot` instead
   */
  context: EditorContext
  snapshot: EditorSnapshot
  event: TBehaviorEvent
}) => TGuardResponse | false

/**
 * @beta
 */
declare type BlockOffset_2 = {
  path: [KeyedSegment]
  offset: number
}

declare type BlockWithOptionalKey_2 =
  | TextBlockWithOptionalKey
  | ObjectBlockWithOptionalKey

declare type ClipboardBehaviorEvent =
  | {
      type: StrictExtract_2<NativeBehaviorEventType, 'clipboard.copy'>
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition_2, 'selection'>
    }
  | {
      type: StrictExtract_2<NativeBehaviorEventType, 'clipboard.cut'>
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition_2, 'selection'>
    }
  | {
      type: StrictExtract_2<NativeBehaviorEventType, 'clipboard.paste'>
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition_2, 'selection'>
    }

/**
 * @beta
 */
export declare type CodeEditorBehaviorsConfig = {
  moveBlockUpShortcut: string
  moveBlockDownShortcut: string
}

declare type Converter<TMIMEType extends MIMEType_2 = MIMEType_2> = {
  mimeType: TMIMEType
  serialize: Serializer<TMIMEType>
  deserialize: Deserializer<TMIMEType>
}

declare type ConverterEvent<TMIMEType extends MIMEType_2 = MIMEType_2> =
  | {
      type: 'serialize'
      originEvent: 'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
    }
  | {
      type: 'serialization.failure'
      mimeType: TMIMEType
      originEvent: 'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      reason: string
    }
  | {
      type: 'serialization.success'
      data: string
      mimeType: TMIMEType
      originEvent: 'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
    }
  | {
      type: 'deserialize'
      data: string
    }
  | {
      type: 'deserialization.failure'
      mimeType: TMIMEType
      reason: string
    }
  | {
      type: 'deserialization.success'
      data: Array<PortableTextBlock>
      mimeType: TMIMEType
    }

/**
 * @beta
 */
export declare const coreBehaviors: Behavior_2<
  | 'serialize'
  | 'clipboard.copy'
  | 'clipboard.cut'
  | 'drag.dragstart'
  | 'serialization.failure'
  | 'serialization.success'
  | 'deserialize'
  | 'deserialization.failure'
  | 'deserialization.success'
  | 'focus'
  | 'delete'
  | 'select'
  | '*'
  | 'annotation.add'
  | 'annotation.remove'
  | 'block.set'
  | 'block.unset'
  | 'blur'
  | 'decorator.add'
  | 'decorator.remove'
  | 'delete.backward'
  | 'delete.block'
  | 'delete.forward'
  | 'delete.text'
  | 'history.redo'
  | 'history.undo'
  | 'insert.inline object'
  | 'insert.block'
  | 'insert.span'
  | 'insert.text'
  | 'move.block'
  | 'split.block'
  | 'annotation.toggle'
  | 'decorator.toggle'
  | 'insert.blocks'
  | 'insert.break'
  | 'insert.soft break'
  | 'list item.add'
  | 'list item.remove'
  | 'list item.toggle'
  | 'move.block down'
  | 'move.block up'
  | 'select.previous block'
  | 'select.next block'
  | 'style.add'
  | 'style.remove'
  | 'style.toggle'
  | 'clipboard.paste'
  | 'drag.drag'
  | 'drag.dragend'
  | 'drag.dragenter'
  | 'drag.dragover'
  | 'drag.dragleave'
  | 'drag.drop'
  | 'input.*'
  | 'keyboard.keydown'
  | 'keyboard.keyup'
  | 'mouse.click'
  | 'serialize.*'
  | 'deserialize.*'
  | 'split.*'
  | 'focus.*'
  | 'block.*'
  | 'style.*'
  | 'delete.*'
  | 'move.*'
  | 'select.*'
  | 'history.*'
  | 'blur.*'
  | 'annotation.*'
  | 'decorator.*'
  | 'insert.*'
  | 'serialization.*'
  | 'deserialization.*'
  | 'list item.*'
  | 'clipboard.*'
  | 'drag.*'
  | 'keyboard.*'
  | 'mouse.*'
  | `custom.${string}`,
  true,
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'annotation.add'
      >
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'annotation.remove'
      >
      annotation: {
        name: string
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'block.set'
      >
      at: [KeyedSegment]
      props: Record<string, unknown>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'block.unset'
      >
      at: [KeyedSegment]
      props: Array<string>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'blur'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'decorator.add'
      >
      decorator: string
      offsets?: {
        anchor: BlockOffset
        focus: BlockOffset
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'decorator.remove'
      >
      decorator: string
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete'
      >
      selection: NonNullable<EditorSelection>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.backward'
      >
      unit: TextUnit
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.block'
      >
      at: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.forward'
      >
      unit: TextUnit
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.text'
      >
      anchor: BlockOffset
      focus: BlockOffset
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'focus'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'history.redo'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'history.undo'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.inline object'
      >
      inlineObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.block'
      >
      block: BlockWithOptionalKey
      placement: InsertPlacement
      select?: 'start' | 'end' | 'none'
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.span'
      >
      text: string
      annotations?: Array<{
        name: string
        value: {
          [prop: string]: unknown
        }
      }>
      decorators?: Array<string>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.text'
      >
      text: string
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'move.block'
      >
      at: [KeyedSegment]
      to: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'select'
      >
      selection: EditorSelection
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'split.block'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'annotation.toggle'
      >
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'decorator.toggle'
      >
      decorator: string
      offsets?: {
        anchor: BlockOffset
        focus: BlockOffset
      }
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'deserialize'
      >
      originEvent:
        | PickFromUnion<
            NativeBehaviorEvent_2,
            'type',
            'drag.drop' | 'clipboard.paste'
          >
        | InputBehaviorEvent
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'serialize'
      >
      originEvent: PickFromUnion<
        NativeBehaviorEvent_2,
        'type',
        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'deserialization.success'
      >
      mimeType: MIMEType
      data: Array<PortableTextBlock>
      originEvent:
        | PickFromUnion<
            NativeBehaviorEvent_2,
            'type',
            'drag.drop' | 'clipboard.paste'
          >
        | InputBehaviorEvent
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'deserialization.failure'
      >
      mimeType: MIMEType
      reason: string
      originEvent:
        | PickFromUnion<
            NativeBehaviorEvent_2,
            'type',
            'drag.drop' | 'clipboard.paste'
          >
        | InputBehaviorEvent
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'serialization.success'
      >
      mimeType: MIMEType
      data: string
      originEvent: PickFromUnion<
        NativeBehaviorEvent_2,
        'type',
        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'serialization.failure'
      >
      mimeType: MIMEType
      reason: string
      originEvent: PickFromUnion<
        NativeBehaviorEvent_2,
        'type',
        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'insert.blocks'
      >
      blocks: Array<PortableTextBlock>
      placement: InsertPlacement
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'insert.break'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'insert.soft break'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'list item.add'
      >
      listItem: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'list item.remove'
      >
      listItem: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'list item.toggle'
      >
      listItem: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'move.block down'
      >
      at: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'move.block up'
      >
      at: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'select.previous block'
      >
      select?: 'start' | 'end'
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'select.next block'
      >
      select?: 'start' | 'end'
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'style.add'
      >
      style: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'style.remove'
      >
      style: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'style.toggle'
      >
      style: string
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'clipboard.copy'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'clipboard.cut'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'clipboard.paste'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragstart'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.drag'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragend'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragenter'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: EventPosition
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragover'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: EventPosition
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.drop'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: EventPosition
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragleave'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
    }
  | InputBehaviorEvent
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'keyboard.keydown'
      >
      originEvent: Pick<
        KeyboardEvent,
        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'
      >
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'keyboard.keyup'
      >
      originEvent: Pick<
        KeyboardEvent,
        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'
      >
    }
  | MouseBehaviorEvent
  | CustomBehaviorEvent_2<Record<string, unknown>, string, `custom.${string}`>
>[]

/**
 * @beta
 */
export declare function createCodeEditorBehaviors(
  config: CodeEditorBehaviorsConfig,
): Behavior_2<
  | 'serialize'
  | 'clipboard.copy'
  | 'clipboard.cut'
  | 'drag.dragstart'
  | 'serialization.failure'
  | 'serialization.success'
  | 'deserialize'
  | 'deserialization.failure'
  | 'deserialization.success'
  | 'focus'
  | 'delete'
  | 'select'
  | '*'
  | 'annotation.add'
  | 'annotation.remove'
  | 'block.set'
  | 'block.unset'
  | 'blur'
  | 'decorator.add'
  | 'decorator.remove'
  | 'delete.backward'
  | 'delete.block'
  | 'delete.forward'
  | 'delete.text'
  | 'history.redo'
  | 'history.undo'
  | 'insert.inline object'
  | 'insert.block'
  | 'insert.span'
  | 'insert.text'
  | 'move.block'
  | 'split.block'
  | 'annotation.toggle'
  | 'decorator.toggle'
  | 'insert.blocks'
  | 'insert.break'
  | 'insert.soft break'
  | 'list item.add'
  | 'list item.remove'
  | 'list item.toggle'
  | 'move.block down'
  | 'move.block up'
  | 'select.previous block'
  | 'select.next block'
  | 'style.add'
  | 'style.remove'
  | 'style.toggle'
  | 'clipboard.paste'
  | 'drag.drag'
  | 'drag.dragend'
  | 'drag.dragenter'
  | 'drag.dragover'
  | 'drag.dragleave'
  | 'drag.drop'
  | 'input.*'
  | 'keyboard.keydown'
  | 'keyboard.keyup'
  | 'mouse.click'
  | 'serialize.*'
  | 'deserialize.*'
  | 'split.*'
  | 'focus.*'
  | 'block.*'
  | 'style.*'
  | 'delete.*'
  | 'move.*'
  | 'select.*'
  | 'history.*'
  | 'blur.*'
  | 'annotation.*'
  | 'decorator.*'
  | 'insert.*'
  | 'serialization.*'
  | 'deserialization.*'
  | 'list item.*'
  | 'clipboard.*'
  | 'drag.*'
  | 'keyboard.*'
  | 'mouse.*'
  | `custom.${string}`,
  true,
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'annotation.add'
      >
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'annotation.remove'
      >
      annotation: {
        name: string
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'block.set'
      >
      at: [KeyedSegment]
      props: Record<string, unknown>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'block.unset'
      >
      at: [KeyedSegment]
      props: Array<string>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'blur'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'decorator.add'
      >
      decorator: string
      offsets?: {
        anchor: BlockOffset
        focus: BlockOffset
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'decorator.remove'
      >
      decorator: string
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete'
      >
      selection: NonNullable<EditorSelection>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.backward'
      >
      unit: TextUnit
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.block'
      >
      at: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.forward'
      >
      unit: TextUnit
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.text'
      >
      anchor: BlockOffset
      focus: BlockOffset
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'focus'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'history.redo'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'history.undo'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.inline object'
      >
      inlineObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.block'
      >
      block: BlockWithOptionalKey
      placement: InsertPlacement
      select?: 'start' | 'end' | 'none'
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.span'
      >
      text: string
      annotations?: Array<{
        name: string
        value: {
          [prop: string]: unknown
        }
      }>
      decorators?: Array<string>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.text'
      >
      text: string
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'move.block'
      >
      at: [KeyedSegment]
      to: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'select'
      >
      selection: EditorSelection
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'split.block'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'annotation.toggle'
      >
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'decorator.toggle'
      >
      decorator: string
      offsets?: {
        anchor: BlockOffset
        focus: BlockOffset
      }
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'deserialize'
      >
      originEvent:
        | PickFromUnion<
            NativeBehaviorEvent_2,
            'type',
            'drag.drop' | 'clipboard.paste'
          >
        | InputBehaviorEvent
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'serialize'
      >
      originEvent: PickFromUnion<
        NativeBehaviorEvent_2,
        'type',
        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'deserialization.success'
      >
      mimeType: MIMEType
      data: Array<PortableTextBlock>
      originEvent:
        | PickFromUnion<
            NativeBehaviorEvent_2,
            'type',
            'drag.drop' | 'clipboard.paste'
          >
        | InputBehaviorEvent
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'deserialization.failure'
      >
      mimeType: MIMEType
      reason: string
      originEvent:
        | PickFromUnion<
            NativeBehaviorEvent_2,
            'type',
            'drag.drop' | 'clipboard.paste'
          >
        | InputBehaviorEvent
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'serialization.success'
      >
      mimeType: MIMEType
      data: string
      originEvent: PickFromUnion<
        NativeBehaviorEvent_2,
        'type',
        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'serialization.failure'
      >
      mimeType: MIMEType
      reason: string
      originEvent: PickFromUnion<
        NativeBehaviorEvent_2,
        'type',
        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'insert.blocks'
      >
      blocks: Array<PortableTextBlock>
      placement: InsertPlacement
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'insert.break'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'insert.soft break'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'list item.add'
      >
      listItem: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'list item.remove'
      >
      listItem: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'list item.toggle'
      >
      listItem: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'move.block down'
      >
      at: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'move.block up'
      >
      at: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'select.previous block'
      >
      select?: 'start' | 'end'
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'select.next block'
      >
      select?: 'start' | 'end'
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'style.add'
      >
      style: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'style.remove'
      >
      style: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'style.toggle'
      >
      style: string
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'clipboard.copy'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'clipboard.cut'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'clipboard.paste'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragstart'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.drag'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragend'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragenter'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: EventPosition
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragover'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: EventPosition
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.drop'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: EventPosition
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragleave'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
    }
  | InputBehaviorEvent
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'keyboard.keydown'
      >
      originEvent: Pick<
        KeyboardEvent,
        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'
      >
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'keyboard.keyup'
      >
      originEvent: Pick<
        KeyboardEvent,
        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'
      >
    }
  | MouseBehaviorEvent
  | CustomBehaviorEvent_2<Record<string, unknown>, string, `custom.${string}`>
>[]

/**
 * @beta
 */
export declare function createEmojiPickerBehaviors<TEmojiMatch>(
  config: EmojiPickerBehaviorsConfig<TEmojiMatch>,
): Behavior_2<
  | 'serialize'
  | 'clipboard.copy'
  | 'clipboard.cut'
  | 'drag.dragstart'
  | 'serialization.failure'
  | 'serialization.success'
  | 'deserialize'
  | 'deserialization.failure'
  | 'deserialization.success'
  | 'focus'
  | 'delete'
  | 'select'
  | '*'
  | 'annotation.add'
  | 'annotation.remove'
  | 'block.set'
  | 'block.unset'
  | 'blur'
  | 'decorator.add'
  | 'decorator.remove'
  | 'delete.backward'
  | 'delete.block'
  | 'delete.forward'
  | 'delete.text'
  | 'history.redo'
  | 'history.undo'
  | 'insert.inline object'
  | 'insert.block'
  | 'insert.span'
  | 'insert.text'
  | 'move.block'
  | 'split.block'
  | 'annotation.toggle'
  | 'decorator.toggle'
  | 'insert.blocks'
  | 'insert.break'
  | 'insert.soft break'
  | 'list item.add'
  | 'list item.remove'
  | 'list item.toggle'
  | 'move.block down'
  | 'move.block up'
  | 'select.previous block'
  | 'select.next block'
  | 'style.add'
  | 'style.remove'
  | 'style.toggle'
  | 'clipboard.paste'
  | 'drag.drag'
  | 'drag.dragend'
  | 'drag.dragenter'
  | 'drag.dragover'
  | 'drag.dragleave'
  | 'drag.drop'
  | 'input.*'
  | 'keyboard.keydown'
  | 'keyboard.keyup'
  | 'mouse.click'
  | 'serialize.*'
  | 'deserialize.*'
  | 'split.*'
  | 'focus.*'
  | 'block.*'
  | 'style.*'
  | 'delete.*'
  | 'move.*'
  | 'select.*'
  | 'history.*'
  | 'blur.*'
  | 'annotation.*'
  | 'decorator.*'
  | 'insert.*'
  | 'serialization.*'
  | 'deserialization.*'
  | 'list item.*'
  | 'clipboard.*'
  | 'drag.*'
  | 'keyboard.*'
  | 'mouse.*'
  | `custom.${string}`,
  true,
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'annotation.add'
      >
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'annotation.remove'
      >
      annotation: {
        name: string
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'block.set'
      >
      at: [KeyedSegment]
      props: Record<string, unknown>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'block.unset'
      >
      at: [KeyedSegment]
      props: Array<string>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'blur'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'decorator.add'
      >
      decorator: string
      offsets?: {
        anchor: BlockOffset
        focus: BlockOffset
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'decorator.remove'
      >
      decorator: string
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete'
      >
      selection: NonNullable<EditorSelection>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.backward'
      >
      unit: TextUnit
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.block'
      >
      at: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.forward'
      >
      unit: TextUnit
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.text'
      >
      anchor: BlockOffset
      focus: BlockOffset
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'focus'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'history.redo'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'history.undo'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.inline object'
      >
      inlineObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.block'
      >
      block: BlockWithOptionalKey
      placement: InsertPlacement
      select?: 'start' | 'end' | 'none'
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.span'
      >
      text: string
      annotations?: Array<{
        name: string
        value: {
          [prop: string]: unknown
        }
      }>
      decorators?: Array<string>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.text'
      >
      text: string
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'move.block'
      >
      at: [KeyedSegment]
      to: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'select'
      >
      selection: EditorSelection
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'split.block'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'annotation.toggle'
      >
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'decorator.toggle'
      >
      decorator: string
      offsets?: {
        anchor: BlockOffset
        focus: BlockOffset
      }
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'deserialize'
      >
      originEvent:
        | PickFromUnion<
            NativeBehaviorEvent_2,
            'type',
            'drag.drop' | 'clipboard.paste'
          >
        | InputBehaviorEvent
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'serialize'
      >
      originEvent: PickFromUnion<
        NativeBehaviorEvent_2,
        'type',
        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'deserialization.success'
      >
      mimeType: MIMEType
      data: Array<PortableTextBlock>
      originEvent:
        | PickFromUnion<
            NativeBehaviorEvent_2,
            'type',
            'drag.drop' | 'clipboard.paste'
          >
        | InputBehaviorEvent
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'deserialization.failure'
      >
      mimeType: MIMEType
      reason: string
      originEvent:
        | PickFromUnion<
            NativeBehaviorEvent_2,
            'type',
            'drag.drop' | 'clipboard.paste'
          >
        | InputBehaviorEvent
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'serialization.success'
      >
      mimeType: MIMEType
      data: string
      originEvent: PickFromUnion<
        NativeBehaviorEvent_2,
        'type',
        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'serialization.failure'
      >
      mimeType: MIMEType
      reason: string
      originEvent: PickFromUnion<
        NativeBehaviorEvent_2,
        'type',
        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'insert.blocks'
      >
      blocks: Array<PortableTextBlock>
      placement: InsertPlacement
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'insert.break'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'insert.soft break'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'list item.add'
      >
      listItem: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'list item.remove'
      >
      listItem: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'list item.toggle'
      >
      listItem: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'move.block down'
      >
      at: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'move.block up'
      >
      at: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'select.previous block'
      >
      select?: 'start' | 'end'
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'select.next block'
      >
      select?: 'start' | 'end'
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'style.add'
      >
      style: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'style.remove'
      >
      style: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'style.toggle'
      >
      style: string
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'clipboard.copy'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'clipboard.cut'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'clipboard.paste'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragstart'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.drag'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragend'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragenter'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: EventPosition
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragover'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: EventPosition
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.drop'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: EventPosition
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragleave'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
    }
  | InputBehaviorEvent
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'keyboard.keydown'
      >
      originEvent: Pick<
        KeyboardEvent,
        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'
      >
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'keyboard.keyup'
      >
      originEvent: Pick<
        KeyboardEvent,
        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'
      >
    }
  | MouseBehaviorEvent
  | CustomBehaviorEvent_2<Record<string, unknown>, string, `custom.${string}`>
>[]

/**
 * @beta
 */
export declare function createLinkBehaviors(
  config: LinkBehaviorsConfig,
): Behavior_2<
  | 'serialize'
  | 'clipboard.copy'
  | 'clipboard.cut'
  | 'drag.dragstart'
  | 'serialization.failure'
  | 'serialization.success'
  | 'deserialize'
  | 'deserialization.failure'
  | 'deserialization.success'
  | 'focus'
  | 'delete'
  | 'select'
  | '*'
  | 'annotation.add'
  | 'annotation.remove'
  | 'block.set'
  | 'block.unset'
  | 'blur'
  | 'decorator.add'
  | 'decorator.remove'
  | 'delete.backward'
  | 'delete.block'
  | 'delete.forward'
  | 'delete.text'
  | 'history.redo'
  | 'history.undo'
  | 'insert.inline object'
  | 'insert.block'
  | 'insert.span'
  | 'insert.text'
  | 'move.block'
  | 'split.block'
  | 'annotation.toggle'
  | 'decorator.toggle'
  | 'insert.blocks'
  | 'insert.break'
  | 'insert.soft break'
  | 'list item.add'
  | 'list item.remove'
  | 'list item.toggle'
  | 'move.block down'
  | 'move.block up'
  | 'select.previous block'
  | 'select.next block'
  | 'style.add'
  | 'style.remove'
  | 'style.toggle'
  | 'clipboard.paste'
  | 'drag.drag'
  | 'drag.dragend'
  | 'drag.dragenter'
  | 'drag.dragover'
  | 'drag.dragleave'
  | 'drag.drop'
  | 'input.*'
  | 'keyboard.keydown'
  | 'keyboard.keyup'
  | 'mouse.click'
  | 'serialize.*'
  | 'deserialize.*'
  | 'split.*'
  | 'focus.*'
  | 'block.*'
  | 'style.*'
  | 'delete.*'
  | 'move.*'
  | 'select.*'
  | 'history.*'
  | 'blur.*'
  | 'annotation.*'
  | 'decorator.*'
  | 'insert.*'
  | 'serialization.*'
  | 'deserialization.*'
  | 'list item.*'
  | 'clipboard.*'
  | 'drag.*'
  | 'keyboard.*'
  | 'mouse.*'
  | `custom.${string}`,
  true,
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'annotation.add'
      >
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'annotation.remove'
      >
      annotation: {
        name: string
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'block.set'
      >
      at: [KeyedSegment]
      props: Record<string, unknown>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'block.unset'
      >
      at: [KeyedSegment]
      props: Array<string>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'blur'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'decorator.add'
      >
      decorator: string
      offsets?: {
        anchor: BlockOffset
        focus: BlockOffset
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'decorator.remove'
      >
      decorator: string
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete'
      >
      selection: NonNullable<EditorSelection>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.backward'
      >
      unit: TextUnit
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.block'
      >
      at: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.forward'
      >
      unit: TextUnit
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.text'
      >
      anchor: BlockOffset
      focus: BlockOffset
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'focus'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'history.redo'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'history.undo'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.inline object'
      >
      inlineObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.block'
      >
      block: BlockWithOptionalKey
      placement: InsertPlacement
      select?: 'start' | 'end' | 'none'
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.span'
      >
      text: string
      annotations?: Array<{
        name: string
        value: {
          [prop: string]: unknown
        }
      }>
      decorators?: Array<string>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.text'
      >
      text: string
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'move.block'
      >
      at: [KeyedSegment]
      to: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'select'
      >
      selection: EditorSelection
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'split.block'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'annotation.toggle'
      >
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'decorator.toggle'
      >
      decorator: string
      offsets?: {
        anchor: BlockOffset
        focus: BlockOffset
      }
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'deserialize'
      >
      originEvent:
        | PickFromUnion<
            NativeBehaviorEvent_2,
            'type',
            'drag.drop' | 'clipboard.paste'
          >
        | InputBehaviorEvent
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'serialize'
      >
      originEvent: PickFromUnion<
        NativeBehaviorEvent_2,
        'type',
        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'deserialization.success'
      >
      mimeType: MIMEType
      data: Array<PortableTextBlock>
      originEvent:
        | PickFromUnion<
            NativeBehaviorEvent_2,
            'type',
            'drag.drop' | 'clipboard.paste'
          >
        | InputBehaviorEvent
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'deserialization.failure'
      >
      mimeType: MIMEType
      reason: string
      originEvent:
        | PickFromUnion<
            NativeBehaviorEvent_2,
            'type',
            'drag.drop' | 'clipboard.paste'
          >
        | InputBehaviorEvent
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'serialization.success'
      >
      mimeType: MIMEType
      data: string
      originEvent: PickFromUnion<
        NativeBehaviorEvent_2,
        'type',
        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'serialization.failure'
      >
      mimeType: MIMEType
      reason: string
      originEvent: PickFromUnion<
        NativeBehaviorEvent_2,
        'type',
        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'insert.blocks'
      >
      blocks: Array<PortableTextBlock>
      placement: InsertPlacement
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'insert.break'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'insert.soft break'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'list item.add'
      >
      listItem: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'list item.remove'
      >
      listItem: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'list item.toggle'
      >
      listItem: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'move.block down'
      >
      at: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'move.block up'
      >
      at: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'select.previous block'
      >
      select?: 'start' | 'end'
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'select.next block'
      >
      select?: 'start' | 'end'
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'style.add'
      >
      style: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'style.remove'
      >
      style: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'style.toggle'
      >
      style: string
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'clipboard.copy'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'clipboard.cut'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'clipboard.paste'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragstart'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.drag'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragend'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragenter'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: EventPosition
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragover'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: EventPosition
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.drop'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: EventPosition
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragleave'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
    }
  | InputBehaviorEvent
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'keyboard.keydown'
      >
      originEvent: Pick<
        KeyboardEvent,
        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'
      >
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'keyboard.keyup'
      >
      originEvent: Pick<
        KeyboardEvent,
        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'
      >
    }
  | MouseBehaviorEvent
  | CustomBehaviorEvent_2<Record<string, unknown>, string, `custom.${string}`>
>[]

/**
 * @beta
 * Create markdown behaviors for common markdown actions such as converting ### to headings, --- to HRs, and more.
 *
 * @example
 * Configure the bundled markdown behaviors
 * ```ts
 * import {EditorProvider} from '@portabletext/editor'
 * import {createMarkdownBehaviors, coreBehaviors} from '@portabletext/editor/behaviors'
 *
 * function App() {
 *  return (
 *   <EditorProvider
 *    initialConfig={{
 *    behaviors: [
 *    ...coreBehaviors,
 *    ...createMarkdownBehaviors({
 *        horizontalRuleObject: ({schema}) => {
 *          const name = schema.blockObjects.find(
 *            (object) => object.name === 'break',
 *          )?.name
 *          return name ? {name} : undefined
 *        },
 *        defaultStyle: ({schema}) => schema.styles[0].value,
 *        headingStyle: ({schema, level}) =>
 *          schema.styles.find((style) => style.value === `h${level}`)
 *            ?.value,
 *        blockquoteStyle: ({schema}) =>
 *          schema.styles.find((style) => style.value === 'blockquote')
 *            ?.value,
 *        unorderedListStyle: ({schema}) =>
 *          schema.lists.find((list) => list.value === 'bullet')?.value,
 *        orderedListStyle: ({schema}) =>
 *          schema.lists.find((list) => list.value === 'number')?.value,
 *      }),
 *      ]
 *    }}
 *    >
 *    {...}
 *    </EditorProvider>
 *  )
 * }
 * ```
 *
 */
export declare function createMarkdownBehaviors(
  config: MarkdownBehaviorsConfig,
): Behavior_2<
  | 'serialize'
  | 'clipboard.copy'
  | 'clipboard.cut'
  | 'drag.dragstart'
  | 'serialization.failure'
  | 'serialization.success'
  | 'deserialize'
  | 'deserialization.failure'
  | 'deserialization.success'
  | 'focus'
  | 'delete'
  | 'select'
  | '*'
  | 'annotation.add'
  | 'annotation.remove'
  | 'block.set'
  | 'block.unset'
  | 'blur'
  | 'decorator.add'
  | 'decorator.remove'
  | 'delete.backward'
  | 'delete.block'
  | 'delete.forward'
  | 'delete.text'
  | 'history.redo'
  | 'history.undo'
  | 'insert.inline object'
  | 'insert.block'
  | 'insert.span'
  | 'insert.text'
  | 'move.block'
  | 'split.block'
  | 'annotation.toggle'
  | 'decorator.toggle'
  | 'insert.blocks'
  | 'insert.break'
  | 'insert.soft break'
  | 'list item.add'
  | 'list item.remove'
  | 'list item.toggle'
  | 'move.block down'
  | 'move.block up'
  | 'select.previous block'
  | 'select.next block'
  | 'style.add'
  | 'style.remove'
  | 'style.toggle'
  | 'clipboard.paste'
  | 'drag.drag'
  | 'drag.dragend'
  | 'drag.dragenter'
  | 'drag.dragover'
  | 'drag.dragleave'
  | 'drag.drop'
  | 'input.*'
  | 'keyboard.keydown'
  | 'keyboard.keyup'
  | 'mouse.click'
  | 'serialize.*'
  | 'deserialize.*'
  | 'split.*'
  | 'focus.*'
  | 'block.*'
  | 'style.*'
  | 'delete.*'
  | 'move.*'
  | 'select.*'
  | 'history.*'
  | 'blur.*'
  | 'annotation.*'
  | 'decorator.*'
  | 'insert.*'
  | 'serialization.*'
  | 'deserialization.*'
  | 'list item.*'
  | 'clipboard.*'
  | 'drag.*'
  | 'keyboard.*'
  | 'mouse.*'
  | `custom.${string}`,
  true,
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'annotation.add'
      >
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'annotation.remove'
      >
      annotation: {
        name: string
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'block.set'
      >
      at: [KeyedSegment]
      props: Record<string, unknown>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'block.unset'
      >
      at: [KeyedSegment]
      props: Array<string>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'blur'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'decorator.add'
      >
      decorator: string
      offsets?: {
        anchor: BlockOffset
        focus: BlockOffset
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'decorator.remove'
      >
      decorator: string
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete'
      >
      selection: NonNullable<EditorSelection>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.backward'
      >
      unit: TextUnit
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.block'
      >
      at: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.forward'
      >
      unit: TextUnit
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'delete.text'
      >
      anchor: BlockOffset
      focus: BlockOffset
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'focus'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'history.redo'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'history.undo'
      >
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.inline object'
      >
      inlineObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.block'
      >
      block: BlockWithOptionalKey
      placement: InsertPlacement
      select?: 'start' | 'end' | 'none'
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.span'
      >
      text: string
      annotations?: Array<{
        name: string
        value: {
          [prop: string]: unknown
        }
      }>
      decorators?: Array<string>
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'insert.text'
      >
      text: string
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'move.block'
      >
      at: [KeyedSegment]
      to: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'select'
      >
      selection: EditorSelection
    }
  | {
      type: StrictExtract<
        | 'focus'
        | 'delete'
        | 'select'
        | 'annotation.add'
        | 'annotation.remove'
        | 'block.set'
        | 'block.unset'
        | 'blur'
        | 'decorator.add'
        | 'decorator.remove'
        | 'delete.backward'
        | 'delete.block'
        | 'delete.forward'
        | 'delete.text'
        | 'history.redo'
        | 'history.undo'
        | 'insert.inline object'
        | 'insert.block'
        | 'insert.span'
        | 'insert.text'
        | 'move.block'
        | 'split.block',
        'split.block'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'annotation.toggle'
      >
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'decorator.toggle'
      >
      decorator: string
      offsets?: {
        anchor: BlockOffset
        focus: BlockOffset
      }
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'deserialize'
      >
      originEvent:
        | PickFromUnion<
            NativeBehaviorEvent_2,
            'type',
            'drag.drop' | 'clipboard.paste'
          >
        | InputBehaviorEvent
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'serialize'
      >
      originEvent: PickFromUnion<
        NativeBehaviorEvent_2,
        'type',
        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'deserialization.success'
      >
      mimeType: MIMEType
      data: Array<PortableTextBlock>
      originEvent:
        | PickFromUnion<
            NativeBehaviorEvent_2,
            'type',
            'drag.drop' | 'clipboard.paste'
          >
        | InputBehaviorEvent
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'deserialization.failure'
      >
      mimeType: MIMEType
      reason: string
      originEvent:
        | PickFromUnion<
            NativeBehaviorEvent_2,
            'type',
            'drag.drop' | 'clipboard.paste'
          >
        | InputBehaviorEvent
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'serialization.success'
      >
      mimeType: MIMEType
      data: string
      originEvent: PickFromUnion<
        NativeBehaviorEvent_2,
        'type',
        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'serialization.failure'
      >
      mimeType: MIMEType
      reason: string
      originEvent: PickFromUnion<
        NativeBehaviorEvent_2,
        'type',
        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'insert.blocks'
      >
      blocks: Array<PortableTextBlock>
      placement: InsertPlacement
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'insert.break'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'insert.soft break'
      >
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'list item.add'
      >
      listItem: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'list item.remove'
      >
      listItem: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'list item.toggle'
      >
      listItem: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'move.block down'
      >
      at: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'move.block up'
      >
      at: [KeyedSegment]
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'select.previous block'
      >
      select?: 'start' | 'end'
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'select.next block'
      >
      select?: 'start' | 'end'
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'style.add'
      >
      style: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'style.remove'
      >
      style: string
    }
  | {
      type: StrictExtract<
        | 'serialize'
        | 'serialization.failure'
        | 'serialization.success'
        | 'deserialize'
        | 'deserialization.failure'
        | 'deserialization.success'
        | 'annotation.toggle'
        | 'decorator.toggle'
        | 'insert.blocks'
        | 'insert.break'
        | 'insert.soft break'
        | 'list item.add'
        | 'list item.remove'
        | 'list item.toggle'
        | 'move.block down'
        | 'move.block up'
        | 'select.previous block'
        | 'select.next block'
        | 'style.add'
        | 'style.remove'
        | 'style.toggle',
        'style.toggle'
      >
      style: string
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'clipboard.copy'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'clipboard.cut'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'clipboard.paste'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragstart'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition, 'selection'>
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.drag'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragend'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragenter'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: EventPosition
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragover'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: EventPosition
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.drop'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: EventPosition
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'drag.dragleave'
      >
      originEvent: {
        dataTransfer: DataTransfer
      }
    }
  | InputBehaviorEvent
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'keyboard.keydown'
      >
      originEvent: Pick<
        KeyboardEvent,
        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'
      >
    }
  | {
      type: StrictExtract<
        | 'clipboard.copy'
        | 'clipboard.cut'
        | 'drag.dragstart'
        | 'clipboard.paste'
        | 'drag.drag'
        | 'drag.dragend'
        | 'drag.dragenter'
        | 'drag.dragover'
        | 'drag.dragleave'
        | 'drag.drop'
        | 'input.*'
        | 'keyboard.keydown'
        | 'keyboard.keyup'
        | 'mouse.click',
        'keyboard.keyup'
      >
      originEvent: Pick<
        KeyboardEvent,
        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'
      >
    }
  | MouseBehaviorEvent
  | CustomBehaviorEvent_2<Record<string, unknown>, string, `custom.${string}`>
>[]

/**
 * @beta
 */
export declare type CustomBehaviorEvent<
  TPayload extends Record<string, unknown> = Record<string, unknown>,
  TType extends string = string,
  TInternalType extends CustomBehaviorEventType<
    'custom',
    TType
  > = CustomBehaviorEventType<'custom', TType>,
> = {
  type: TInternalType
} & TPayload

/**************************************
 * Custom events
 **************************************/
declare type CustomBehaviorEventNamespace = 'custom'

declare type CustomBehaviorEventType<
  TNamespace extends CustomBehaviorEventNamespace,
  TType extends string = '',
> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`

/**
 * @beta
 *
 * @example
 *
 * ```tsx
 * const noLowerCaseA = defineBehavior({
 *   on: 'insert.text',
 *   guard: ({event, snapshot}) => event.text === 'a',
 *   actions: [({event, snapshot}) => [{type: 'insert.text', text: 'A'}]],
 * })
 * ```
 *
 */
export declare function defineBehavior<
  TPayload extends Record<string, unknown>,
  TBehaviorEventType extends
    | '*'
    | `${BehaviorEventTypeNamespace}.*`
    | BehaviorEvent['type'] = CustomBehaviorEvent['type'],
  TGuardResponse = true,
>(
  behavior: Behavior<
    TBehaviorEventType,
    TGuardResponse,
    ResolveBehaviorEvent<TBehaviorEventType, TPayload>
  >,
): Behavior

declare type Deserializer<TMIMEType extends MIMEType_2> = ({
  snapshot,
  event,
}: {
  snapshot: EditorSnapshot
  event: PickFromUnion_2<ConverterEvent<TMIMEType>, 'type', 'deserialize'>
}) => PickFromUnion_2<
  ConverterEvent<TMIMEType>,
  'type',
  'deserialization.success' | 'deserialization.failure'
>

declare type DragBehaviorEvent =
  | {
      type: StrictExtract_2<NativeBehaviorEventType, 'drag.dragstart'>
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: Pick<EventPosition_2, 'selection'>
    }
  | {
      type: StrictExtract_2<NativeBehaviorEventType, 'drag.drag'>
      originEvent: {
        dataTransfer: DataTransfer
      }
    }
  | {
      type: StrictExtract_2<NativeBehaviorEventType, 'drag.dragend'>
      originEvent: {
        dataTransfer: DataTransfer
      }
    }
  | {
      type: StrictExtract_2<NativeBehaviorEventType, 'drag.dragenter'>
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: EventPosition_2
    }
  | {
      type: StrictExtract_2<NativeBehaviorEventType, 'drag.dragover'>
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: EventPosition_2
    }
  | {
      type: StrictExtract_2<NativeBehaviorEventType, 'drag.drop'>
      originEvent: {
        dataTransfer: DataTransfer
      }
      position: EventPosition_2
    }
  | {
      type: StrictExtract_2<NativeBehaviorEventType, 'drag.dragleave'>
      originEvent: {
        dataTransfer: DataTransfer
      }
    }

/** @beta */
declare interface EditableAPI {
  activeAnnotations: () => PortableTextObject[]
  isAnnotationActive: (annotationType: PortableTextObject['_type']) => boolean
  addAnnotation: <
    TSchemaType extends {
      name: string
    },
  >(
    type: TSchemaType,
    value?: {
      [prop: string]: unknown
    },
  ) =>
    | {
        markDefPath: Path
        markDefPaths: Array<Path>
        spanPath: Path
      }
    | undefined
  blur: () => void
  delete: (
    selection: EditorSelection_2,
    options?: EditableAPIDeleteOptions,
  ) => void
  findByPath: (
    path: Path,
  ) => [PortableTextBlock | PortableTextChild | undefined, Path | undefined]
  findDOMNode: (
    element: PortableTextBlock | PortableTextChild,
  ) => DOMNode | undefined
  focus: () => void
  focusBlock: () => PortableTextBlock | undefined
  focusChild: () => PortableTextChild | undefined
  getSelection: () => EditorSelection_2
  getFragment: () => PortableTextBlock[] | undefined
  getValue: () => PortableTextBlock[] | undefined
  hasBlockStyle: (style: string) => boolean
  hasListStyle: (listStyle: string) => boolean
  insertBlock: <
    TSchemaType extends {
      name: string
    },
  >(
    type: TSchemaType,
    value?: {
      [prop: string]: unknown
    },
  ) => Path
  insertChild: <
    TSchemaType extends {
      name: string
    },
  >(
    type: TSchemaType,
    value?: {
      [prop: string]: unknown
    },
  ) => Path
  insertBreak: () => void
  isCollapsedSelection: () => boolean
  isExpandedSelection: () => boolean
  isMarkActive: (mark: string) => boolean
  isSelectionsOverlapping: (
    selectionA: EditorSelection_2,
    selectionB: EditorSelection_2,
  ) => boolean
  isVoid: (element: PortableTextBlock | PortableTextChild) => boolean
  marks: () => string[]
  redo: () => void
  removeAnnotation: <
    TSchemaType extends {
      name: string
    },
  >(
    type: TSchemaType,
  ) => void
  select: (selection: EditorSelection_2) => void
  toggleBlockStyle: (blockStyle: string) => void
  toggleList: (listStyle: string) => void
  toggleMark: (mark: string) => void
  undo: () => void
}

/** @beta */
declare interface EditableAPIDeleteOptions {
  mode?: 'blocks' | 'children' | 'selected'
}

/**
 * @internal
 */
declare type EditorActor = ActorRefFrom<typeof editorMachine>

/**
 * @public
 */
declare type EditorContext = {
  activeDecorators: Array<string>
  converters: Array<Converter>
  keyGenerator: () => string
  readOnly: boolean
  schema: EditorSchema
  selection: EditorSelection_2
  value: Array<PortableTextBlock>
}

/**
 * @internal
 */
declare const editorMachine: StateMachine<
  {
    behaviors: Set<Behavior>
    converters: Set<Converter>
    keyGenerator: () => string
    pendingEvents: Array<InternalPatchEvent | MutationEvent>
    schema: EditorSchema
    initialReadOnly: boolean
    maxBlocks: number | undefined
    selection: EditorSelection_2
    value: Array<PortableTextBlock> | undefined
    internalDrag?: {
      ghost?: HTMLElement
      origin: Pick<EventPosition_2, 'selection'>
    }
  },
  | InternalPatchEvent
  | MutationEvent
  | {
      type: 'add behavior'
      behavior: Behavior
    }
  | {
      type: 'remove behavior'
      behavior: Behavior
    }
  | {
      type: 'update readOnly'
      readOnly: boolean
    }
  | {
      type: 'update schema'
      schema: EditorSchema
    }
  | {
      type: 'update behaviors'
      behaviors: Array<Behavior>
    }
  | {
      type: 'update key generator'
      keyGenerator: () => string
    }
  | {
      type: 'update value'
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'update maxBlocks'
      maxBlocks: number | undefined
    }
  | PatchesEvent
  | {
      type: 'normalizing'
    }
  | {
      type: 'done normalizing'
    }
  | {
      type: 'done syncing initial value'
    }
  | {
      type: 'behavior event'
      behaviorEvent: BehaviorEvent
      editor: PortableTextSlateEditor
      defaultActionCallback?: () => void
      nativeEvent?: {
        preventDefault: () => void
      }
    }
  | {
      type: 'notify.patch'
      patch: Patch
    }
  | {
      type: 'notify.mutation'
      patches: Array<Patch>
      snapshot: Array<PortableTextBlock> | undefined
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'notify.blurred'
      event: FocusEvent_2<HTMLDivElement, Element>
    }
  | {
      type: 'notify.done loading'
    }
  | {
      type: 'notify.editable'
    }
  | {
      type: 'notify.error'
      name: string
      description: string
      data: unknown
    }
  | {
      type: 'notify.focused'
      event: FocusEvent_2<HTMLDivElement, Element>
    }
  | {
      type: 'notify.invalid value'
      resolution: InvalidValueResolution | null
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'notify.loading'
    }
  | {
      type: 'notify.read only'
    }
  | {
      type: 'notify.ready'
    }
  | {
      type: 'notify.selection'
      selection: EditorSelection_2
    }
  | {
      type: 'notify.value changed'
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'notify.unset'
      previousValue: Array<PortableTextBlock>
    }
  | {
      type: 'dragstart'
      origin: Pick<EventPosition_2, 'selection'>
      ghost?: HTMLElement
    }
  | {
      type: 'dragend'
    }
  | {
      type: 'drop'
    },
  {},
  never,
  Values<{
    'add behavior to context': {
      type: 'add behavior to context'
      params: NonReducibleUnknown
    }
    'remove behavior from context': {
      type: 'remove behavior from context'
      params: NonReducibleUnknown
    }
    'assign behaviors': {
      type: 'assign behaviors'
      params: NonReducibleUnknown
    }
    'assign schema': {
      type: 'assign schema'
      params: NonReducibleUnknown
    }
    'emit patch event': {
      type: 'emit patch event'
      params: NonReducibleUnknown
    }
    'emit mutation event': {
      type: 'emit mutation event'
      params: NonReducibleUnknown
    }
    'emit read only': {
      type: 'emit read only'
      params: NonReducibleUnknown
    }
    'emit editable': {
      type: 'emit editable'
      params: NonReducibleUnknown
    }
    'defer event': {
      type: 'defer event'
      params: NonReducibleUnknown
    }
    'emit pending events': {
      type: 'emit pending events'
      params: NonReducibleUnknown
    }
    'emit ready': {
      type: 'emit ready'
      params: NonReducibleUnknown
    }
    'clear pending events': {
      type: 'clear pending events'
      params: NonReducibleUnknown
    }
    'handle behavior event': {
      type: 'handle behavior event'
      params: unknown
    }
  }>,
  never,
  never,
  {
    'edit mode':
      | {
          editable: 'dragging internally' | 'idle'
        }
      | {
          'read only': 'read only' | 'determine initial edit mode'
        }
    'setup':
      | 'setting up'
      | 'dirty'
      | {
          pristine: 'normalizing' | 'idle'
        }
  },
  'dragging internally',
  {
    behaviors?: Array<Behavior>
    converters?: Array<Converter>
    keyGenerator: () => string
    maxBlocks?: number
    readOnly?: boolean
    schema: EditorSchema
    value?: Array<PortableTextBlock>
  },
  NonReducibleUnknown,
  | PatchEvent
  | InternalPatchEvent
  | MutationEvent
  | PatchesEvent
  | {
      type: 'blurred'
      event: FocusEvent_2<HTMLDivElement, Element>
    }
  | {
      type: 'done loading'
    }
  | {
      type: 'editable'
    }
  | {
      type: 'error'
      name: string
      description: string
      data: unknown
    }
  | {
      type: 'focused'
      event: FocusEvent_2<HTMLDivElement, Element>
    }
  | {
      type: 'invalid value'
      resolution: InvalidValueResolution | null
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'loading'
    }
  | {
      type: 'read only'
    }
  | {
      type: 'ready'
    }
  | {
      type: 'selection'
      selection: EditorSelection_2
    }
  | {
      type: 'value changed'
      value: Array<PortableTextBlock> | undefined
    }
  | UnsetEvent,
  MetaObject,
  {
    readonly id: 'editor'
    readonly context: ({
      input,
    }: {
      spawn: {
        <TSrc extends never>(
          logic: TSrc,
          ...[options]: never
        ): ActorRefFromLogic<never>
        <TLogic extends AnyActorLogic>(
          src: TLogic,
          ...[options]: ConditionalRequired<
            [
              options?:
                | ({
                    id?: never
                    systemId?: string
                    input?: InputFrom<TLogic> | undefined
                    syncSnapshot?: boolean
                  } & {[K in RequiredLogicInput<TLogic>]: unknown})
                | undefined,
            ],
            IsNotNever<RequiredLogicInput<TLogic>>
          >
        ): ActorRefFromLogic<TLogic>
      }
      input: {
        behaviors?: Array<Behavior>
        converters?: Array<Converter>
        keyGenerator: () => string
        maxBlocks?: number
        readOnly?: boolean
        schema: EditorSchema
        value?: Array<PortableTextBlock>
      }
      self: ActorRef<
        MachineSnapshot<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<InternalPatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection_2
            value: Array<PortableTextBlock> | undefined
            internalDrag?: {
              ghost?: HTMLElement
              origin: Pick<EventPosition_2, 'selection'>
            }
          },
          | InternalPatchEvent
          | MutationEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: BehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection_2
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'dragstart'
              origin: Pick<EventPosition_2, 'selection'>
              ghost?: HTMLElement
            }
          | {
              type: 'dragend'
            }
          | {
              type: 'drop'
            },
          Record<string, AnyActorRef | undefined>,
          StateValue,
          string,
          unknown,
          any,
          any
        >,
        | InternalPatchEvent
        | MutationEvent
        | {
            type: 'add behavior'
            behavior: Behavior
          }
        | {
            type: 'remove behavior'
            behavior: Behavior
          }
        | {
            type: 'update readOnly'
            readOnly: boolean
          }
        | {
            type: 'update schema'
            schema: EditorSchema
          }
        | {
            type: 'update behaviors'
            behaviors: Array<Behavior>
          }
        | {
            type: 'update key generator'
            keyGenerator: () => string
          }
        | {
            type: 'update value'
            value: Array<PortableTextBlock> | undefined
          }
        | {
            type: 'update maxBlocks'
            maxBlocks: number | undefined
          }
        | PatchesEvent
        | {
            type: 'normalizing'
          }
        | {
            type: 'done normalizing'
          }
        | {
            type: 'done syncing initial value'
          }
        | {
            type: 'behavior event'
            behaviorEvent: BehaviorEvent
            editor: PortableTextSlateEditor
            defaultActionCallback?: () => void
            nativeEvent?: {
              preventDefault: () => void
            }
          }
        | {
            type: 'notify.patch'
            patch: Patch
          }
        | {
            type: 'notify.mutation'
            patches: Array<Patch>
            snapshot: Array<PortableTextBlock> | undefined
            value: Array<PortableTextBlock> | undefined
          }
        | {
            type: 'notify.blurred'
            event: FocusEvent_2<HTMLDivElement, Element>
          }
        | {
            type: 'notify.done loading'
          }
        | {
            type: 'notify.editable'
          }
        | {
            type: 'notify.error'
            name: string
            description: string
            data: unknown
          }
        | {
            type: 'notify.focused'
            event: FocusEvent_2<HTMLDivElement, Element>
          }
        | {
            type: 'notify.invalid value'
            resolution: InvalidValueResolution | null
            value: Array<PortableTextBlock> | undefined
          }
        | {
            type: 'notify.loading'
          }
        | {
            type: 'notify.read only'
          }
        | {
            type: 'notify.ready'
          }
        | {
            type: 'notify.selection'
            selection: EditorSelection_2
          }
        | {
            type: 'notify.value changed'
            value: Array<PortableTextBlock> | undefined
          }
        | {
            type: 'notify.unset'
            previousValue: Array<PortableTextBlock>
          }
        | {
            type: 'dragstart'
            origin: Pick<EventPosition_2, 'selection'>
            ghost?: HTMLElement
          }
        | {
            type: 'dragend'
          }
        | {
            type: 'drop'
          },
        AnyEventObject
      >
    }) => {
      behaviors: Set<Behavior>
      converters: Set<Converter>
      keyGenerator: () => string
      pendingEvents: never[]
      schema: PortableTextMemberSchemaTypes_2
      selection: null
      initialReadOnly: boolean
      maxBlocks: number | undefined
      value: PortableTextBlock[] | undefined
    }
    readonly on: {
      readonly 'notify.blurred': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<InternalPatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection_2
            value: Array<PortableTextBlock> | undefined
            internalDrag?: {
              ghost?: HTMLElement
              origin: Pick<EventPosition_2, 'selection'>
            }
          },
          {
            type: 'notify.blurred'
            event: FocusEvent_2<HTMLDivElement, Element>
          },
          | InternalPatchEvent
          | MutationEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: BehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection_2
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'dragstart'
              origin: Pick<EventPosition_2, 'selection'>
              ghost?: HTMLElement
            }
          | {
              type: 'dragend'
            }
          | {
              type: 'drop'
            },
          undefined,
          never,
          never,
          never,
          never,
          | PatchEvent
          | InternalPatchEvent
          | MutationEvent
          | PatchesEvent
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'editable'
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'loading'
            }
          | {
              type: 'read only'
            }
          | {
              type: 'ready'
            }
          | {
              type: 'selection'
              selection: EditorSelection_2
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | UnsetEvent
        >
      }
      readonly 'notify.done loading': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<InternalPatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection_2
            value: Array<PortableTextBlock> | undefined
            internalDrag?: {
              ghost?: HTMLElement
              origin: Pick<EventPosition_2, 'selection'>
            }
          },
          {
            type: 'notify.done loading'
          },
          | InternalPatchEvent
          | MutationEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: BehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection_2
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'dragstart'
              origin: Pick<EventPosition_2, 'selection'>
              ghost?: HTMLElement
            }
          | {
              type: 'dragend'
            }
          | {
              type: 'drop'
            },
          undefined,
          never,
          never,
          never,
          never,
          | PatchEvent
          | InternalPatchEvent
          | MutationEvent
          | PatchesEvent
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'editable'
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'loading'
            }
          | {
              type: 'read only'
            }
          | {
              type: 'ready'
            }
          | {
              type: 'selection'
              selection: EditorSelection_2
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | UnsetEvent
        >
      }
      readonly 'notify.error': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<InternalPatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection_2
            value: Array<PortableTextBlock> | undefined
            internalDrag?: {
              ghost?: HTMLElement
              origin: Pick<EventPosition_2, 'selection'>
            }
          },
          {
            type: 'notify.error'
            name: string
            description: string
            data: unknown
          },
          | InternalPatchEvent
          | MutationEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: BehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection_2
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'dragstart'
              origin: Pick<EventPosition_2, 'selection'>
              ghost?: HTMLElement
            }
          | {
              type: 'dragend'
            }
          | {
              type: 'drop'
            },
          undefined,
          never,
          never,
          never,
          never,
          | PatchEvent
          | InternalPatchEvent
          | MutationEvent
          | PatchesEvent
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'editable'
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'loading'
            }
          | {
              type: 'read only'
            }
          | {
              type: 'ready'
            }
          | {
              type: 'selection'
              selection: EditorSelection_2
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | UnsetEvent
        >
      }
      readonly 'notify.invalid value': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<InternalPatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection_2
            value: Array<PortableTextBlock> | undefined
            internalDrag?: {
              ghost?: HTMLElement
              origin: Pick<EventPosition_2, 'selection'>
            }
          },
          {
            type: 'notify.invalid value'
            resolution: InvalidValueResolution | null
            value: Array<PortableTextBlock> | undefined
          },
          | InternalPatchEvent
          | MutationEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: BehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection_2
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'dragstart'
              origin: Pick<EventPosition_2, 'selection'>
              ghost?: HTMLElement
            }
          | {
              type: 'dragend'
            }
          | {
              type: 'drop'
            },
          undefined,
          never,
          never,
          never,
          never,
          | PatchEvent
          | InternalPatchEvent
          | MutationEvent
          | PatchesEvent
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'editable'
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'loading'
            }
          | {
              type: 'read only'
            }
          | {
              type: 'ready'
            }
          | {
              type: 'selection'
              selection: EditorSelection_2
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | UnsetEvent
        >
      }
      readonly 'notify.focused': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<InternalPatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection_2
            value: Array<PortableTextBlock> | undefined
            internalDrag?: {
              ghost?: HTMLElement
              origin: Pick<EventPosition_2, 'selection'>
            }
          },
          {
            type: 'notify.focused'
            event: FocusEvent_2<HTMLDivElement, Element>
          },
          | InternalPatchEvent
          | MutationEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: BehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection_2
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'dragstart'
              origin: Pick<EventPosition_2, 'selection'>
              ghost?: HTMLElement
            }
          | {
              type: 'dragend'
            }
          | {
              type: 'drop'
            },
          undefined,
          never,
          never,
          never,
          never,
          | PatchEvent
          | InternalPatchEvent
          | MutationEvent
          | PatchesEvent
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'editable'
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'loading'
            }
          | {
              type: 'read only'
            }
          | {
              type: 'ready'
            }
          | {
              type: 'selection'
              selection: EditorSelection_2
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | UnsetEvent
        >
      }
      readonly 'notify.selection': {
        readonly actions: readonly [
          ActionFunction<
            {
              behaviors: Set<Behavior>
              converters: Set<Converter>
              keyGenerator: () => string
              pendingEvents: Array<InternalPatchEvent | MutationEvent>
              schema: EditorSchema
              initialReadOnly: boolean
              maxBlocks: number | undefined
              selection: EditorSelection_2
              value: Array<PortableTextBlock> | undefined
              internalDrag?: {
                ghost?: HTMLElement
                origin: Pick<EventPosition_2, 'selection'>
              }
            },
            {
              type: 'notify.selection'
              selection: EditorSelection_2
            },
            | InternalPatchEvent
            | MutationEvent
            | {
                type: 'add behavior'
                behavior: Behavior
              }
            | {
                type: 'remove behavior'
                behavior: Behavior
              }
            | {
                type: 'update readOnly'
                readOnly: boolean
              }
            | {
                type: 'update schema'
                schema: EditorSchema
              }
            | {
                type: 'update behaviors'
                behaviors: Array<Behavior>
              }
            | {
                type: 'update key generator'
                keyGenerator: () => string
              }
            | {
                type: 'update value'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'update maxBlocks'
                maxBlocks: number | undefined
              }
            | PatchesEvent
            | {
                type: 'normalizing'
              }
            | {
                type: 'done normalizing'
              }
            | {
                type: 'done syncing initial value'
              }
            | {
                type: 'behavior event'
                behaviorEvent: BehaviorEvent
                editor: PortableTextSlateEditor
                defaultActionCallback?: () => void
                nativeEvent?: {
                  preventDefault: () => void
                }
              }
            | {
                type: 'notify.patch'
                patch: Patch
              }
            | {
                type: 'notify.mutation'
                patches: Array<Patch>
                snapshot: Array<PortableTextBlock> | undefined
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'notify.blurred'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'notify.done loading'
              }
            | {
                type: 'notify.editable'
              }
            | {
                type: 'notify.error'
                name: string
                description: string
                data: unknown
              }
            | {
                type: 'notify.focused'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'notify.invalid value'
                resolution: InvalidValueResolution | null
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'notify.loading'
              }
            | {
                type: 'notify.read only'
              }
            | {
                type: 'notify.ready'
              }
            | {
                type: 'notify.selection'
                selection: EditorSelection_2
              }
            | {
                type: 'notify.value changed'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'notify.unset'
                previousValue: Array<PortableTextBlock>
              }
            | {
                type: 'dragstart'
                origin: Pick<EventPosition_2, 'selection'>
                ghost?: HTMLElement
              }
            | {
                type: 'dragend'
              }
            | {
                type: 'drop'
              },
            undefined,
            never,
            never,
            never,
            never,
            never
          >,
          ActionFunction<
            {
              behaviors: Set<Behavior>
              converters: Set<Converter>
              keyGenerator: () => string
              pendingEvents: Array<InternalPatchEvent | MutationEvent>
              schema: EditorSchema
              initialReadOnly: boolean
              maxBlocks: number | undefined
              selection: EditorSelection_2
              value: Array<PortableTextBlock> | undefined
              internalDrag?: {
                ghost?: HTMLElement
                origin: Pick<EventPosition_2, 'selection'>
              }
            },
            {
              type: 'notify.selection'
              selection: EditorSelection_2
            },
            | InternalPatchEvent
            | MutationEvent
            | {
                type: 'add behavior'
                behavior: Behavior
              }
            | {
                type: 'remove behavior'
                behavior: Behavior
              }
            | {
                type: 'update readOnly'
                readOnly: boolean
              }
            | {
                type: 'update schema'
                schema: EditorSchema
              }
            | {
                type: 'update behaviors'
                behaviors: Array<Behavior>
              }
            | {
                type: 'update key generator'
                keyGenerator: () => string
              }
            | {
                type: 'update value'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'update maxBlocks'
                maxBlocks: number | undefined
              }
            | PatchesEvent
            | {
                type: 'normalizing'
              }
            | {
                type: 'done normalizing'
              }
            | {
                type: 'done syncing initial value'
              }
            | {
                type: 'behavior event'
                behaviorEvent: BehaviorEvent
                editor: PortableTextSlateEditor
                defaultActionCallback?: () => void
                nativeEvent?: {
                  preventDefault: () => void
                }
              }
            | {
                type: 'notify.patch'
                patch: Patch
              }
            | {
                type: 'notify.mutation'
                patches: Array<Patch>
                snapshot: Array<PortableTextBlock> | undefined
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'notify.blurred'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'notify.done loading'
              }
            | {
                type: 'notify.editable'
              }
            | {
                type: 'notify.error'
                name: string
                description: string
                data: unknown
              }
            | {
                type: 'notify.focused'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'notify.invalid value'
                resolution: InvalidValueResolution | null
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'notify.loading'
              }
            | {
                type: 'notify.read only'
              }
            | {
                type: 'notify.ready'
              }
            | {
                type: 'notify.selection'
                selection: EditorSelection_2
              }
            | {
                type: 'notify.value changed'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'notify.unset'
                previousValue: Array<PortableTextBlock>
              }
            | {
                type: 'dragstart'
                origin: Pick<EventPosition_2, 'selection'>
                ghost?: HTMLElement
              }
            | {
                type: 'dragend'
              }
            | {
                type: 'drop'
              },
            undefined,
            never,
            never,
            never,
            never,
            | PatchEvent
            | InternalPatchEvent
            | MutationEvent
            | PatchesEvent
            | {
                type: 'blurred'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'done loading'
              }
            | {
                type: 'editable'
              }
            | {
                type: 'error'
                name: string
                description: string
                data: unknown
              }
            | {
                type: 'focused'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'invalid value'
                resolution: InvalidValueResolution | null
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'loading'
              }
            | {
                type: 'read only'
              }
            | {
                type: 'ready'
              }
            | {
                type: 'selection'
                selection: EditorSelection_2
              }
            | {
                type: 'value changed'
                value: Array<PortableTextBlock> | undefined
              }
            | UnsetEvent
          >,
        ]
      }
      readonly 'notify.unset': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<InternalPatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection_2
            value: Array<PortableTextBlock> | undefined
            internalDrag?: {
              ghost?: HTMLElement
              origin: Pick<EventPosition_2, 'selection'>
            }
          },
          {
            type: 'notify.unset'
            previousValue: Array<PortableTextBlock>
          },
          | InternalPatchEvent
          | MutationEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: BehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection_2
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'dragstart'
              origin: Pick<EventPosition_2, 'selection'>
              ghost?: HTMLElement
            }
          | {
              type: 'dragend'
            }
          | {
              type: 'drop'
            },
          undefined,
          never,
          never,
          never,
          never,
          | PatchEvent
          | InternalPatchEvent
          | MutationEvent
          | PatchesEvent
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'editable'
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'loading'
            }
          | {
              type: 'read only'
            }
          | {
              type: 'ready'
            }
          | {
              type: 'selection'
              selection: EditorSelection_2
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | UnsetEvent
        >
      }
      readonly 'notify.loading': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<InternalPatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection_2
            value: Array<PortableTextBlock> | undefined
            internalDrag?: {
              ghost?: HTMLElement
              origin: Pick<EventPosition_2, 'selection'>
            }
          },
          {
            type: 'notify.loading'
          },
          | InternalPatchEvent
          | MutationEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: BehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection_2
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'dragstart'
              origin: Pick<EventPosition_2, 'selection'>
              ghost?: HTMLElement
            }
          | {
              type: 'dragend'
            }
          | {
              type: 'drop'
            },
          undefined,
          never,
          never,
          never,
          never,
          | PatchEvent
          | InternalPatchEvent
          | MutationEvent
          | PatchesEvent
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'editable'
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'loading'
            }
          | {
              type: 'read only'
            }
          | {
              type: 'ready'
            }
          | {
              type: 'selection'
              selection: EditorSelection_2
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | UnsetEvent
        >
      }
      readonly 'notify.value changed': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<InternalPatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection_2
            value: Array<PortableTextBlock> | undefined
            internalDrag?: {
              ghost?: HTMLElement
              origin: Pick<EventPosition_2, 'selection'>
            }
          },
          {
            type: 'notify.value changed'
            value: Array<PortableTextBlock> | undefined
          },
          | InternalPatchEvent
          | MutationEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: BehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection_2
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'dragstart'
              origin: Pick<EventPosition_2, 'selection'>
              ghost?: HTMLElement
            }
          | {
              type: 'dragend'
            }
          | {
              type: 'drop'
            },
          undefined,
          never,
          never,
          never,
          never,
          | PatchEvent
          | InternalPatchEvent
          | MutationEvent
          | PatchesEvent
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'editable'
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'loading'
            }
          | {
              type: 'read only'
            }
          | {
              type: 'ready'
            }
          | {
              type: 'selection'
              selection: EditorSelection_2
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | UnsetEvent
        >
      }
      readonly 'add behavior': {
        readonly actions: 'add behavior to context'
      }
      readonly 'remove behavior': {
        readonly actions: 'remove behavior from context'
      }
      readonly 'patches': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<InternalPatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection_2
            value: Array<PortableTextBlock> | undefined
            internalDrag?: {
              ghost?: HTMLElement
              origin: Pick<EventPosition_2, 'selection'>
            }
          },
          PatchesEvent,
          | InternalPatchEvent
          | MutationEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: BehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection_2
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'dragstart'
              origin: Pick<EventPosition_2, 'selection'>
              ghost?: HTMLElement
            }
          | {
              type: 'dragend'
            }
          | {
              type: 'drop'
            },
          undefined,
          never,
          never,
          never,
          never,
          | PatchEvent
          | InternalPatchEvent
          | MutationEvent
          | PatchesEvent
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'editable'
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'loading'
            }
          | {
              type: 'read only'
            }
          | {
              type: 'ready'
            }
          | {
              type: 'selection'
              selection: EditorSelection_2
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | UnsetEvent
        >
      }
      readonly 'update behaviors': {
        readonly actions: 'assign behaviors'
      }
      readonly 'update key generator': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<InternalPatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection_2
            value: Array<PortableTextBlock> | undefined
            internalDrag?: {
              ghost?: HTMLElement
              origin: Pick<EventPosition_2, 'selection'>
            }
          },
          {
            type: 'update key generator'
            keyGenerator: () => string
          },
          | InternalPatchEvent
          | MutationEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: BehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection_2
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'dragstart'
              origin: Pick<EventPosition_2, 'selection'>
              ghost?: HTMLElement
            }
          | {
              type: 'dragend'
            }
          | {
              type: 'drop'
            },
          undefined,
          never,
          never,
          never,
          never,
          never
        >
      }
      readonly 'update schema': {
        readonly actions: 'assign schema'
      }
      readonly 'update value': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<InternalPatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection_2
            value: Array<PortableTextBlock> | undefined
            internalDrag?: {
              ghost?: HTMLElement
              origin: Pick<EventPosition_2, 'selection'>
            }
          },
          {
            type: 'update value'
            value: Array<PortableTextBlock> | undefined
          },
          | InternalPatchEvent
          | MutationEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: BehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection_2
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'dragstart'
              origin: Pick<EventPosition_2, 'selection'>
              ghost?: HTMLElement
            }
          | {
              type: 'dragend'
            }
          | {
              type: 'drop'
            },
          undefined,
          never,
          never,
          never,
          never,
          never
        >
      }
      readonly 'update maxBlocks': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<InternalPatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection_2
            value: Array<PortableTextBlock> | undefined
            internalDrag?: {
              ghost?: HTMLElement
              origin: Pick<EventPosition_2, 'selection'>
            }
          },
          {
            type: 'update maxBlocks'
            maxBlocks: number | undefined
          },
          | InternalPatchEvent
          | MutationEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: BehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection_2
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'dragstart'
              origin: Pick<EventPosition_2, 'selection'>
              ghost?: HTMLElement
            }
          | {
              type: 'dragend'
            }
          | {
              type: 'drop'
            },
          undefined,
          never,
          never,
          never,
          never,
          never
        >
      }
    }
    readonly type: 'parallel'
    readonly states: {
      readonly 'edit mode': {
        readonly initial: 'read only'
        readonly states: {
          readonly 'read only': {
            readonly initial: 'determine initial edit mode'
            readonly on: {
              readonly 'behavior event': {
                readonly actions: 'handle behavior event'
                readonly guard: ({
                  event,
                }: GuardArgs<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<InternalPatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection_2
                    value: Array<PortableTextBlock> | undefined
                    internalDrag?: {
                      ghost?: HTMLElement
                      origin: Pick<EventPosition_2, 'selection'>
                    }
                  },
                  {
                    type: 'behavior event'
                    behaviorEvent: BehaviorEvent
                    editor: PortableTextSlateEditor
                    defaultActionCallback?: () => void
                    nativeEvent?: {
                      preventDefault: () => void
                    }
                  }
                >) => boolean
              }
            }
            readonly states: {
              readonly 'determine initial edit mode': {
                readonly on: {
                  readonly 'done syncing initial value': readonly [
                    {
                      readonly target: '#editor.edit mode.read only.read only'
                      readonly guard: ({
                        context,
                      }: GuardArgs<
                        {
                          behaviors: Set<Behavior>
                          converters: Set<Converter>
                          keyGenerator: () => string
                          pendingEvents: Array<
                            InternalPatchEvent | MutationEvent
                          >
                          schema: EditorSchema
                          initialReadOnly: boolean
                          maxBlocks: number | undefined
                          selection: EditorSelection_2
                          value: Array<PortableTextBlock> | undefined
                          internalDrag?: {
                            ghost?: HTMLElement
                            origin: Pick<EventPosition_2, 'selection'>
                          }
                        },
                        {
                          type: 'done syncing initial value'
                        }
                      >) => boolean
                    },
                    {
                      readonly target: '#editor.edit mode.editable'
                    },
                  ]
                }
              }
              readonly 'read only': {
                readonly on: {
                  readonly 'update readOnly': {
                    readonly guard: ({
                      event,
                    }: GuardArgs<
                      {
                        behaviors: Set<Behavior>
                        converters: Set<Converter>
                        keyGenerator: () => string
                        pendingEvents: Array<InternalPatchEvent | MutationEvent>
                        schema: EditorSchema
                        initialReadOnly: boolean
                        maxBlocks: number | undefined
                        selection: EditorSelection_2
                        value: Array<PortableTextBlock> | undefined
                        internalDrag?: {
                          ghost?: HTMLElement
                          origin: Pick<EventPosition_2, 'selection'>
                        }
                      },
                      {
                        type: 'update readOnly'
                        readOnly: boolean
                      }
                    >) => boolean
                    readonly target: '#editor.edit mode.editable'
                    readonly actions: readonly ['emit editable']
                  }
                }
              }
            }
          }
          readonly 'editable': {
            readonly on: {
              readonly 'update readOnly': {
                readonly guard: ({
                  event,
                }: GuardArgs<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<InternalPatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection_2
                    value: Array<PortableTextBlock> | undefined
                    internalDrag?: {
                      ghost?: HTMLElement
                      origin: Pick<EventPosition_2, 'selection'>
                    }
                  },
                  {
                    type: 'update readOnly'
                    readOnly: boolean
                  }
                >) => boolean
                readonly target: '#editor.edit mode.read only.read only'
                readonly actions: readonly ['emit read only']
              }
              readonly 'behavior event': {
                readonly actions: 'handle behavior event'
              }
            }
            readonly initial: 'idle'
            readonly states: {
              readonly 'idle': {
                readonly on: {
                  readonly dragstart: {
                    readonly actions: readonly [
                      ActionFunction<
                        {
                          behaviors: Set<Behavior>
                          converters: Set<Converter>
                          keyGenerator: () => string
                          pendingEvents: Array<
                            InternalPatchEvent | MutationEvent
                          >
                          schema: EditorSchema
                          initialReadOnly: boolean
                          maxBlocks: number | undefined
                          selection: EditorSelection_2
                          value: Array<PortableTextBlock> | undefined
                          internalDrag?: {
                            ghost?: HTMLElement
                            origin: Pick<EventPosition_2, 'selection'>
                          }
                        },
                        {
                          type: 'dragstart'
                          origin: Pick<EventPosition_2, 'selection'>
                          ghost?: HTMLElement
                        },
                        | InternalPatchEvent
                        | MutationEvent
                        | {
                            type: 'add behavior'
                            behavior: Behavior
                          }
                        | {
                            type: 'remove behavior'
                            behavior: Behavior
                          }
                        | {
                            type: 'update readOnly'
                            readOnly: boolean
                          }
                        | {
                            type: 'update schema'
                            schema: EditorSchema
                          }
                        | {
                            type: 'update behaviors'
                            behaviors: Array<Behavior>
                          }
                        | {
                            type: 'update key generator'
                            keyGenerator: () => string
                          }
                        | {
                            type: 'update value'
                            value: Array<PortableTextBlock> | undefined
                          }
                        | {
                            type: 'update maxBlocks'
                            maxBlocks: number | undefined
                          }
                        | PatchesEvent
                        | {
                            type: 'normalizing'
                          }
                        | {
                            type: 'done normalizing'
                          }
                        | {
                            type: 'done syncing initial value'
                          }
                        | {
                            type: 'behavior event'
                            behaviorEvent: BehaviorEvent
                            editor: PortableTextSlateEditor
                            defaultActionCallback?: () => void
                            nativeEvent?: {
                              preventDefault: () => void
                            }
                          }
                        | {
                            type: 'notify.patch'
                            patch: Patch
                          }
                        | {
                            type: 'notify.mutation'
                            patches: Array<Patch>
                            snapshot: Array<PortableTextBlock> | undefined
                            value: Array<PortableTextBlock> | undefined
                          }
                        | {
                            type: 'notify.blurred'
                            event: FocusEvent_2<HTMLDivElement, Element>
                          }
                        | {
                            type: 'notify.done loading'
                          }
                        | {
                            type: 'notify.editable'
                          }
                        | {
                            type: 'notify.error'
                            name: string
                            description: string
                            data: unknown
                          }
                        | {
                            type: 'notify.focused'
                            event: FocusEvent_2<HTMLDivElement, Element>
                          }
                        | {
                            type: 'notify.invalid value'
                            resolution: InvalidValueResolution | null
                            value: Array<PortableTextBlock> | undefined
                          }
                        | {
                            type: 'notify.loading'
                          }
                        | {
                            type: 'notify.read only'
                          }
                        | {
                            type: 'notify.ready'
                          }
                        | {
                            type: 'notify.selection'
                            selection: EditorSelection_2
                          }
                        | {
                            type: 'notify.value changed'
                            value: Array<PortableTextBlock> | undefined
                          }
                        | {
                            type: 'notify.unset'
                            previousValue: Array<PortableTextBlock>
                          }
                        | {
                            type: 'dragstart'
                            origin: Pick<EventPosition_2, 'selection'>
                            ghost?: HTMLElement
                          }
                        | {
                            type: 'dragend'
                          }
                        | {
                            type: 'drop'
                          },
                        undefined,
                        never,
                        never,
                        never,
                        never,
                        never
                      >,
                    ]
                    readonly target: 'dragging internally'
                  }
                }
              }
              readonly 'dragging internally': {
                readonly exit: readonly [
                  ({
                    context,
                  }: ActionArgs<
                    {
                      behaviors: Set<Behavior>
                      converters: Set<Converter>
                      keyGenerator: () => string
                      pendingEvents: Array<InternalPatchEvent | MutationEvent>
                      schema: EditorSchema
                      initialReadOnly: boolean
                      maxBlocks: number | undefined
                      selection: EditorSelection_2
                      value: Array<PortableTextBlock> | undefined
                      internalDrag?: {
                        ghost?: HTMLElement
                        origin: Pick<EventPosition_2, 'selection'>
                      }
                    },
                    | InternalPatchEvent
                    | MutationEvent
                    | {
                        type: 'add behavior'
                        behavior: Behavior
                      }
                    | {
                        type: 'remove behavior'
                        behavior: Behavior
                      }
                    | {
                        type: 'update readOnly'
                        readOnly: boolean
                      }
                    | {
                        type: 'update schema'
                        schema: EditorSchema
                      }
                    | {
                        type: 'update behaviors'
                        behaviors: Array<Behavior>
                      }
                    | {
                        type: 'update key generator'
                        keyGenerator: () => string
                      }
                    | {
                        type: 'update value'
                        value: Array<PortableTextBlock> | undefined
                      }
                    | {
                        type: 'update maxBlocks'
                        maxBlocks: number | undefined
                      }
                    | PatchesEvent
                    | {
                        type: 'normalizing'
                      }
                    | {
                        type: 'done normalizing'
                      }
                    | {
                        type: 'done syncing initial value'
                      }
                    | {
                        type: 'behavior event'
                        behaviorEvent: BehaviorEvent
                        editor: PortableTextSlateEditor
                        defaultActionCallback?: () => void
                        nativeEvent?: {
                          preventDefault: () => void
                        }
                      }
                    | {
                        type: 'notify.patch'
                        patch: Patch
                      }
                    | {
                        type: 'notify.mutation'
                        patches: Array<Patch>
                        snapshot: Array<PortableTextBlock> | undefined
                        value: Array<PortableTextBlock> | undefined
                      }
                    | {
                        type: 'notify.blurred'
                        event: FocusEvent_2<HTMLDivElement, Element>
                      }
                    | {
                        type: 'notify.done loading'
                      }
                    | {
                        type: 'notify.editable'
                      }
                    | {
                        type: 'notify.error'
                        name: string
                        description: string
                        data: unknown
                      }
                    | {
                        type: 'notify.focused'
                        event: FocusEvent_2<HTMLDivElement, Element>
                      }
                    | {
                        type: 'notify.invalid value'
                        resolution: InvalidValueResolution | null
                        value: Array<PortableTextBlock> | undefined
                      }
                    | {
                        type: 'notify.loading'
                      }
                    | {
                        type: 'notify.read only'
                      }
                    | {
                        type: 'notify.ready'
                      }
                    | {
                        type: 'notify.selection'
                        selection: EditorSelection_2
                      }
                    | {
                        type: 'notify.value changed'
                        value: Array<PortableTextBlock> | undefined
                      }
                    | {
                        type: 'notify.unset'
                        previousValue: Array<PortableTextBlock>
                      }
                    | {
                        type: 'dragstart'
                        origin: Pick<EventPosition_2, 'selection'>
                        ghost?: HTMLElement
                      }
                    | {
                        type: 'dragend'
                      }
                    | {
                        type: 'drop'
                      },
                    | InternalPatchEvent
                    | MutationEvent
                    | {
                        type: 'add behavior'
                        behavior: Behavior
                      }
                    | {
                        type: 'remove behavior'
                        behavior: Behavior
                      }
                    | {
                        type: 'update readOnly'
                        readOnly: boolean
                      }
                    | {
                        type: 'update schema'
                        schema: EditorSchema
                      }
                    | {
                        type: 'update behaviors'
                        behaviors: Array<Behavior>
                      }
                    | {
                        type: 'update key generator'
                        keyGenerator: () => string
                      }
                    | {
                        type: 'update value'
                        value: Array<PortableTextBlock> | undefined
                      }
                    | {
                        type: 'update maxBlocks'
                        maxBlocks: number | undefined
                      }
                    | PatchesEvent
                    | {
                        type: 'normalizing'
                      }
                    | {
                        type: 'done normalizing'
                      }
                    | {
                        type: 'done syncing initial value'
                      }
                    | {
                        type: 'behavior event'
                        behaviorEvent: BehaviorEvent
                        editor: PortableTextSlateEditor
                        defaultActionCallback?: () => void
                        nativeEvent?: {
                          preventDefault: () => void
                        }
                      }
                    | {
                        type: 'notify.patch'
                        patch: Patch
                      }
                    | {
                        type: 'notify.mutation'
                        patches: Array<Patch>
                        snapshot: Array<PortableTextBlock> | undefined
                        value: Array<PortableTextBlock> | undefined
                      }
                    | {
                        type: 'notify.blurred'
                        event: FocusEvent_2<HTMLDivElement, Element>
                      }
                    | {
                        type: 'notify.done loading'
                      }
                    | {
                        type: 'notify.editable'
                      }
                    | {
                        type: 'notify.error'
                        name: string
                        description: string
                        data: unknown
                      }
                    | {
                        type: 'notify.focused'
                        event: FocusEvent_2<HTMLDivElement, Element>
                      }
                    | {
                        type: 'notify.invalid value'
                        resolution: InvalidValueResolution | null
                        value: Array<PortableTextBlock> | undefined
                      }
                    | {
                        type: 'notify.loading'
                      }
                    | {
                        type: 'notify.read only'
                      }
                    | {
                        type: 'notify.ready'
                      }
                    | {
                        type: 'notify.selection'
                        selection: EditorSelection_2
                      }
                    | {
                        type: 'notify.value changed'
                        value: Array<PortableTextBlock> | undefined
                      }
                    | {
                        type: 'notify.unset'
                        previousValue: Array<PortableTextBlock>
                      }
                    | {
                        type: 'dragstart'
                        origin: Pick<EventPosition_2, 'selection'>
                        ghost?: HTMLElement
                      }
                    | {
                        type: 'dragend'
                      }
                    | {
                        type: 'drop'
                      }
                  >) => void,
                  ActionFunction<
                    {
                      behaviors: Set<Behavior>
                      converters: Set<Converter>
                      keyGenerator: () => string
                      pendingEvents: Array<InternalPatchEvent | MutationEvent>
                      schema: EditorSchema
                      initialReadOnly: boolean
                      maxBlocks: number | undefined
                      selection: EditorSelection_2
                      value: Array<PortableTextBlock> | undefined
                      internalDrag?: {
                        ghost?: HTMLElement
                        origin: Pick<EventPosition_2, 'selection'>
                      }
                    },
                    | InternalPatchEvent
                    | MutationEvent
                    | {
                        type: 'add behavior'
                        behavior: Behavior
                      }
                    | {
                        type: 'remove behavior'
                        behavior: Behavior
                      }
                    | {
                        type: 'update readOnly'
                        readOnly: boolean
                      }
                    | {
                        type: 'update schema'
                        schema: EditorSchema
                      }
                    | {
                        type: 'update behaviors'
                        behaviors: Array<Behavior>
                      }
                    | {
                        type: 'update key generator'
                        keyGenerator: () => string
                      }
                    | {
                        type: 'update value'
                        value: Array<PortableTextBlock> | undefined
                      }
                    | {
                        type: 'update maxBlocks'
                        maxBlocks: number | undefined
                      }
                    | PatchesEvent
                    | {
                        type: 'normalizing'
                      }
                    | {
                        type: 'done normalizing'
                      }
                    | {
                        type: 'done syncing initial value'
                      }
                    | {
                        type: 'behavior event'
                        behaviorEvent: BehaviorEvent
                        editor: PortableTextSlateEditor
                        defaultActionCallback?: () => void
                        nativeEvent?: {
                          preventDefault: () => void
                        }
                      }
                    | {
                        type: 'notify.patch'
                        patch: Patch
                      }
                    | {
                        type: 'notify.mutation'
                        patches: Array<Patch>
                        snapshot: Array<PortableTextBlock> | undefined
                        value: Array<PortableTextBlock> | undefined
                      }
                    | {
                        type: 'notify.blurred'
                        event: FocusEvent_2<HTMLDivElement, Element>
                      }
                    | {
                        type: 'notify.done loading'
                      }
                    | {
                        type: 'notify.editable'
                      }
                    | {
                        type: 'notify.error'
                        name: string
                        description: string
                        data: unknown
                      }
                    | {
                        type: 'notify.focused'
                        event: FocusEvent_2<HTMLDivElement, Element>
                      }
                    | {
                        type: 'notify.invalid value'
                        resolution: InvalidValueResolution | null
                        value: Array<PortableTextBlock> | undefined
                      }
                    | {
                        type: 'notify.loading'
                      }
                    | {
                        type: 'notify.read only'
                      }
                    | {
                        type: 'notify.ready'
                      }
                    | {
                        type: 'notify.selection'
                        selection: EditorSelection_2
                      }
                    | {
                        type: 'notify.value changed'
                        value: Array<PortableTextBlock> | undefined
                      }
                    | {
                        type: 'notify.unset'
                        previousValue: Array<PortableTextBlock>
                      }
                    | {
                        type: 'dragstart'
                        origin: Pick<EventPosition_2, 'selection'>
                        ghost?: HTMLElement
                      }
                    | {
                        type: 'dragend'
                      }
                    | {
                        type: 'drop'
                      },
                    | InternalPatchEvent
                    | MutationEvent
                    | {
                        type: 'add behavior'
                        behavior: Behavior
                      }
                    | {
                        type: 'remove behavior'
                        behavior: Behavior
                      }
                    | {
                        type: 'update readOnly'
                        readOnly: boolean
                      }
                    | {
                        type: 'update schema'
                        schema: EditorSchema
                      }
                    | {
                        type: 'update behaviors'
                        behaviors: Array<Behavior>
                      }
                    | {
                        type: 'update key generator'
                        keyGenerator: () => string
                      }
                    | {
                        type: 'update value'
                        value: Array<PortableTextBlock> | undefined
                      }
                    | {
                        type: 'update maxBlocks'
                        maxBlocks: number | undefined
                      }
                    | PatchesEvent
                    | {
                        type: 'normalizing'
                      }
                    | {
                        type: 'done normalizing'
                      }
                    | {
                        type: 'done syncing initial value'
                      }
                    | {
                        type: 'behavior event'
                        behaviorEvent: BehaviorEvent
                        editor: PortableTextSlateEditor
                        defaultActionCallback?: () => void
                        nativeEvent?: {
                          preventDefault: () => void
                        }
                      }
                    | {
                        type: 'notify.patch'
                        patch: Patch
                      }
                    | {
                        type: 'notify.mutation'
                        patches: Array<Patch>
                        snapshot: Array<PortableTextBlock> | undefined
                        value: Array<PortableTextBlock> | undefined
                      }
                    | {
                        type: 'notify.blurred'
                        event: FocusEvent_2<HTMLDivElement, Element>
                      }
                    | {
                        type: 'notify.done loading'
                      }
                    | {
                        type: 'notify.editable'
                      }
                    | {
                        type: 'notify.error'
                        name: string
                        description: string
                        data: unknown
                      }
                    | {
                        type: 'notify.focused'
                        event: FocusEvent_2<HTMLDivElement, Element>
                      }
                    | {
                        type: 'notify.invalid value'
                        resolution: InvalidValueResolution | null
                        value: Array<PortableTextBlock> | undefined
                      }
                    | {
                        type: 'notify.loading'
                      }
                    | {
                        type: 'notify.read only'
                      }
                    | {
                        type: 'notify.ready'
                      }
                    | {
                        type: 'notify.selection'
                        selection: EditorSelection_2
                      }
                    | {
                        type: 'notify.value changed'
                        value: Array<PortableTextBlock> | undefined
                      }
                    | {
                        type: 'notify.unset'
                        previousValue: Array<PortableTextBlock>
                      }
                    | {
                        type: 'dragstart'
                        origin: Pick<EventPosition_2, 'selection'>
                        ghost?: HTMLElement
                      }
                    | {
                        type: 'dragend'
                      }
                    | {
                        type: 'drop'
                      },
                    undefined,
                    never,
                    never,
                    never,
                    never,
                    never
                  >,
                ]
                readonly tags: readonly ['dragging internally']
                readonly on: {
                  readonly dragend: {
                    readonly target: 'idle'
                  }
                  readonly drop: {
                    readonly target: 'idle'
                  }
                }
              }
            }
          }
        }
      }
      readonly 'setup': {
        readonly initial: 'setting up'
        readonly states: {
          readonly 'setting up': {
            readonly exit: readonly ['emit ready']
            readonly on: {
              readonly 'internal.patch': {
                readonly actions: 'defer event'
              }
              readonly 'mutation': {
                readonly actions: 'defer event'
              }
              readonly 'done syncing initial value': {
                readonly target: 'pristine'
              }
            }
          }
          readonly 'pristine': {
            readonly initial: 'idle'
            readonly states: {
              readonly idle: {
                readonly on: {
                  readonly 'normalizing': {
                    readonly target: 'normalizing'
                  }
                  readonly 'internal.patch': {
                    readonly actions: 'defer event'
                    readonly target: '#editor.setup.dirty'
                  }
                  readonly 'mutation': {
                    readonly actions: 'defer event'
                    readonly target: '#editor.setup.dirty'
                  }
                }
              }
              readonly normalizing: {
                readonly on: {
                  readonly 'done normalizing': {
                    readonly target: 'idle'
                  }
                  readonly 'internal.patch': {
                    readonly actions: 'defer event'
                  }
                  readonly 'mutation': {
                    readonly actions: 'defer event'
                  }
                }
              }
            }
          }
          readonly 'dirty': {
            readonly entry: readonly [
              'emit pending events',
              'clear pending events',
            ]
            readonly on: {
              readonly 'internal.patch': {
                readonly actions: 'emit patch event'
              }
              readonly 'mutation': {
                readonly actions: 'emit mutation event'
              }
            }
          }
        }
      }
    }
  }
>

/**
 * @public
 */
declare type EditorSchema = PortableTextMemberSchemaTypes

/** @public */
declare type EditorSelection_2 = {
  anchor: EditorSelectionPoint
  focus: EditorSelectionPoint
  backward?: boolean
} | null

/** @public */
declare type EditorSelectionPoint = {
  path: Path
  offset: number
}

/**
 * @public
 */
declare type EditorSnapshot = {
  context: EditorContext
  /**
   * @beta
   * Do not rely on this externally
   */
  beta: {
    hasTag: HasTag
    internalDrag:
      | {
          origin: Pick<EventPosition_2, 'selection'>
        }
      | undefined
  }
}

/**
 * @beta
 */
export declare type EmojiPickerBehaviorsConfig<TEmojiMatch> = {
  /**
   * Match emojis by keyword.
   */
  matchEmojis: ({keyword}: {keyword: string}) => Array<TEmojiMatch>
  onMatchesChanged: ({matches}: {matches: Array<TEmojiMatch>}) => void
  onSelectedIndexChanged: ({selectedIndex}: {selectedIndex: number}) => void
  /**
   * Parse an emoji match to a string that will be inserted into the editor.
   */
  parseMatch: ({match}: {match: TEmojiMatch}) => string | undefined
}

declare type EventPosition_2 = {
  block: 'start' | 'end'
  /**
   * Did the event origin from the editor DOM node itself or from a child node?
   */
  isEditor: boolean
  selection: NonNullable<EditorSelection_2>
}

declare type ExtractNamespace<TType extends string> =
  TType extends `${infer Namespace}.${string}` ? Namespace : TType

declare type HasTag = ReturnType<EditorActor['getSnapshot']>['hasTag']

declare interface History_2 {
  redos: HistoryItem[]
  undos: HistoryItem[]
}

declare type HistoryItem = {
  operations: Operation[]
  timestamp: Date
}

/**
 * Used to represent native InputEvents that hold a DataTransfer object.
 *
 * These can either be one of:
 *
 * - insertFromPaste
 * - insertFromPasteAsQuotation
 * - insertFromDrop
 * - insertReplacementText
 * - insertFromYank
 */
declare type InputBehaviorEvent_2 = {
  type: StrictExtract_2<NativeBehaviorEventType, 'input.*'>
  originEvent: {
    dataTransfer: DataTransfer
  }
}

declare type InsertPlacement_2 = 'auto' | 'after' | 'before'

declare type InternalPatchEvent = NamespaceEvent<PatchEvent, 'internal'> & {
  actionId?: string
  value: Array<PortableTextBlock>
}

/**
 * The editor has invalid data in the value that can be resolved by the user
 * @beta */
declare type InvalidValueResolution = {
  autoResolve?: boolean
  patches: Patch[]
  description: string
  action: string
  item: PortableTextBlock[] | PortableTextBlock | PortableTextChild | undefined
  /**
   * i18n keys for the description and action
   *
   * These are in addition to the description and action properties, to decouple the editor from
   * the i18n system, and allow usage without it. The i18n keys take precedence over the
   * description and action properties, if i18n framework is available.
   */
  i18n: {
    description: `inputs.portable-text.invalid-value.${Lowercase<string>}.description`
    action: `inputs.portable-text.invalid-value.${Lowercase<string>}.action`
    values?: Record<string, string | number | string[]>
  }
}

declare type KeyboardBehaviorEvent =
  | {
      type: StrictExtract_2<NativeBehaviorEventType, 'keyboard.keydown'>
      originEvent: Pick<
        KeyboardEvent,
        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'
      >
    }
  | {
      type: StrictExtract_2<NativeBehaviorEventType, 'keyboard.keyup'>
      originEvent: Pick<
        KeyboardEvent,
        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'
      >
    }

/**
 * @beta
 */
export declare type LinkBehaviorsConfig = {
  linkAnnotation?: (context: {schema: EditorSchema; url: string}) =>
    | {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    | undefined
}

/**
 * @beta
 */
export declare type MarkdownBehaviorsConfig = {
  horizontalRuleObject?: (context: {schema: EditorSchema}) =>
    | {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    | undefined
  defaultStyle?: (context: {schema: EditorSchema}) => string | undefined
  headingStyle?: (context: {
    schema: EditorSchema
    level: number
  }) => string | undefined
  blockquoteStyle?: (context: {schema: EditorSchema}) => string | undefined
  unorderedListStyle?: (context: {schema: EditorSchema}) => string | undefined
  orderedListStyle?: (context: {schema: EditorSchema}) => string | undefined
}

declare type MIMEType_2 = `${string}/${string}`

declare type MouseBehaviorEvent_2 = {
  type: StrictExtract_2<NativeBehaviorEventType, 'mouse.click'>
  position: EventPosition_2
}

/**
 * @public
 */
declare type MutationEvent = {
  type: 'mutation'
  patches: Array<Patch>
  /**
   * @deprecated Use `value` instead
   */
  snapshot: Array<PortableTextBlock> | undefined
  value: Array<PortableTextBlock> | undefined
}

declare type NamespacedBehaviorEventType<
  TNamespace extends BehaviorEventTypeNamespace | '',
> = TNamespace extends ''
  ? BehaviorEvent['type']
  : Extract<BehaviorEvent['type'], TNamespace | `${TNamespace}.${string}`>

declare type NamespaceEvent<
  TEvent,
  TNamespace extends string,
> = TEvent extends {
  type: infer TEventType
}
  ? {
      [K in keyof TEvent]: K extends 'type'
        ? `${TNamespace}.${TEventType & string}`
        : TEvent[K]
    }
  : never

/**
 * @beta
 */
export declare type NativeBehaviorEvent =
  | ClipboardBehaviorEvent
  | DragBehaviorEvent
  | InputBehaviorEvent_2
  | KeyboardBehaviorEvent
  | MouseBehaviorEvent_2

declare type NativeBehaviorEventNamespace =
  ExtractNamespace<NativeBehaviorEventType>

declare type NativeBehaviorEventType = (typeof nativeBehaviorEventTypes)[number]

/**************************************
 * Native events
 **************************************/
declare const nativeBehaviorEventTypes: readonly [
  'clipboard.copy',
  'clipboard.cut',
  'clipboard.paste',
  'drag.dragstart',
  'drag.drag',
  'drag.dragend',
  'drag.dragenter',
  'drag.dragover',
  'drag.dragleave',
  'drag.drop',
  'input.*',
  'keyboard.keydown',
  'keyboard.keyup',
  'mouse.click',
]

declare type ObjectBlockWithOptionalKey = Omit<PortableTextObject, '_key'> & {
  _key?: PortableTextObject['_key']
}

/**
 * @public
 */
declare type PatchesEvent = {
  type: 'patches'
  patches: Array<Patch>
  snapshot: Array<PortableTextBlock> | undefined
}

declare type PatchEvent = {
  type: 'patch'
  patch: Patch
}

/**
 * @internal
 */
declare type PickFromUnion_2<
  TUnion,
  TTagKey extends keyof TUnion,
  TPickedTags extends TUnion[TTagKey],
> = TUnion extends Record<TTagKey, TPickedTags> ? TUnion : never

/** @beta */
declare type PortableTextMemberSchemaTypes = {
  annotations: (ObjectSchemaType & {
    i18nTitleKey?: string
  })[]
  block: ObjectSchemaType
  blockObjects: ObjectSchemaType[]
  decorators: BlockDecoratorDefinition[]
  inlineObjects: ObjectSchemaType[]
  portableText: ArraySchemaType<PortableTextBlock>
  span: ObjectSchemaType
  styles: BlockStyleDefinition[]
  lists: BlockListDefinition[]
}

declare interface PortableTextSlateEditor extends ReactEditor {
  _key: 'editor'
  _type: 'editor'
  createPlaceholderBlock: () => Descendant
  editable: EditableAPI
  history: History_2
  insertPortableTextData: (data: DataTransfer) => boolean
  insertTextOrHTMLData: (data: DataTransfer) => boolean
  isTextBlock: (value: unknown) => value is PortableTextTextBlock
  isTextSpan: (value: unknown) => value is PortableTextSpan
  isListBlock: (value: unknown) => value is PortableTextListBlock
  /**
   * Use hotkeys
   */
  pteWithHotKeys: (event: KeyboardEvent_2<HTMLDivElement>) => void
  /**
   * Helper function that creates a text block
   */
  pteCreateTextBlock: (options: {
    decorators: Array<string>
    listItem?: string
    level?: number
  }) => Descendant
  /**
   * Undo
   */
  undo: () => void
  /**
   * Redo
   */
  redo: () => void
}

/**
 * @beta
 */
export declare function raise(
  event: AbstractBehaviorEvent | SyntheticBehaviorEvent | CustomBehaviorEvent,
): PickFromUnion_2<BehaviorAction, 'type', 'raise'>

/**************************************
 * Resolve behavior event
 **************************************/
declare type ResolveBehaviorEvent<
  TBehaviorEventType extends
    | '*'
    | `${BehaviorEventTypeNamespace}.*`
    | BehaviorEvent['type'],
  TPayload extends Record<string, unknown> = Record<string, unknown>,
> = TBehaviorEventType extends '*'
  ? BehaviorEvent
  : TBehaviorEventType extends `${infer TNamespace}.*`
    ? TNamespace extends BehaviorEventTypeNamespace
      ? PickFromUnion_2<
          BehaviorEvent,
          'type',
          NamespacedBehaviorEventType<TNamespace>
        >
      : never
    : TBehaviorEventType extends `custom.${infer TType}`
      ? CustomBehaviorEvent<TPayload, TType>
      : TBehaviorEventType extends BehaviorEvent['type']
        ? PickFromUnion_2<BehaviorEvent, 'type', TBehaviorEventType>
        : never

declare type Serializer<TMIMEType extends MIMEType_2> = ({
  snapshot,
  event,
}: {
  snapshot: EditorSnapshot
  event: PickFromUnion_2<ConverterEvent<TMIMEType>, 'type', 'serialize'>
}) => PickFromUnion_2<
  ConverterEvent<TMIMEType>,
  'type',
  'serialization.success' | 'serialization.failure'
>

declare type StrictExtract_2<T, U extends T> = U

/**
 * @beta
 */
export declare type SyntheticBehaviorEvent =
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'annotation.add'>
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'annotation.remove'>
      annotation: {
        name: string
      }
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'block.set'>
      at: [KeyedSegment]
      props: Record<string, unknown>
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'block.unset'>
      at: [KeyedSegment]
      props: Array<string>
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'blur'>
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'decorator.add'>
      decorator: string
      offsets?: {
        anchor: BlockOffset_2
        focus: BlockOffset_2
      }
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'decorator.remove'>
      decorator: string
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'delete'>
      selection: NonNullable<EditorSelection_2>
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'delete.backward'>
      unit: TextUnit
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'delete.block'>
      at: [KeyedSegment]
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'delete.forward'>
      unit: TextUnit
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'delete.text'>
      anchor: BlockOffset_2
      focus: BlockOffset_2
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'focus'>
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'history.redo'>
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'history.undo'>
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'insert.inline object'>
      inlineObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'insert.block'>
      block: BlockWithOptionalKey_2
      placement: InsertPlacement_2
      select?: 'start' | 'end' | 'none'
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'insert.span'>
      text: string
      annotations?: Array<{
        name: string
        value: {
          [prop: string]: unknown
        }
      }>
      decorators?: Array<string>
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'insert.text'>
      text: string
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'move.block'>
      at: [KeyedSegment]
      to: [KeyedSegment]
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'select'>
      selection: EditorSelection_2
    }
  | {
      type: StrictExtract_2<SyntheticBehaviorEventType, 'split.block'>
    }

declare type SyntheticBehaviorEventNamespace =
  ExtractNamespace<SyntheticBehaviorEventType>

declare type SyntheticBehaviorEventType =
  (typeof syntheticBehaviorEventTypes)[number]

/**************************************
 * Synthetic events
 **************************************/
declare const syntheticBehaviorEventTypes: readonly [
  'annotation.add',
  'annotation.remove',
  'block.set',
  'block.unset',
  'blur',
  'decorator.add',
  'decorator.remove',
  'delete',
  'delete.backward',
  'delete.block',
  'delete.forward',
  'delete.text',
  'focus',
  'history.redo',
  'history.undo',
  'insert.inline object',
  'insert.block',
  'insert.span',
  'insert.text',
  'move.block',
  'select',
  'split.block',
]

declare type TextBlockWithOptionalKey = Omit<PortableTextTextBlock, '_key'> & {
  _key?: PortableTextTextBlock['_key']
}

declare type UnsetEvent = {
  type: 'unset'
  previousValue: Array<PortableTextBlock>
}

export {}
