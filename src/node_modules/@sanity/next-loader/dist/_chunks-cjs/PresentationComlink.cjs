"use strict";
var comlink = require("@sanity/comlink"), serverActions = require("@sanity/next-loader/server-actions"), presentationComlink = require("@sanity/presentation-comlink"), navigation_js = require("next/navigation.js"), React = require("react"), useEffectEvent = require("use-effect-event"), context = require("./context.cjs");
function PresentationComlink(props) {
  const { draftModeEnabled, draftModePerspective } = props, router = navigation_js.useRouter(), handlePerspectiveChange = useEffectEvent.useEffectEvent(
    (perspective, signal) => {
      draftModeEnabled && perspective !== draftModePerspective && serverActions.setPerspectiveCookie(perspective).then(() => {
        signal.aborted || router.refresh();
      }).catch((reason) => console.error("Failed to set the preview perspective cookie", reason));
    }
  );
  return React.useEffect(() => {
    const comlink$1 = comlink.createNode(
      {
        name: "loaders",
        connectTo: "presentation"
      },
      comlink.createNodeMachine().provide({
        actors: presentationComlink.createCompatibilityActors()
      })
    );
    let controller;
    comlink$1.on("loader/perspective", (data) => {
      controller?.abort(), controller = new AbortController(), handlePerspectiveChange(data.perspective, controller.signal);
    });
    const stop = comlink$1.start();
    return context.setComlink(comlink$1), () => {
      stop();
    };
  }, []), null;
}
PresentationComlink.displayName = "PresentationComlink";
exports.default = PresentationComlink;
//# sourceMappingURL=PresentationComlink.cjs.map
