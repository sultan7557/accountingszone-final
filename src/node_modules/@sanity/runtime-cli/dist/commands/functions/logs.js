import { Args, Command } from '@oclif/core';
import Spinner from 'yocto-spinner';
import { readBlueprintOnDisk } from '../../actions/blueprints/blueprint.js';
import { logs } from '../../actions/functions/logs.js';
import config from '../../config.js';
import { bold, red, yellow } from '../../utils/display/colors.js';
import { findFunctionByName } from '../../utils/find-function.js';
export default class Logs extends Command {
    static args = {
        name: Args.string({ description: 'The name of the Sanity Function', required: true }),
    };
    static description = 'Retrieve logs for a Sanity Function';
    static examples = ['<%= config.bin %> <%= command.id %> <ID>'];
    async run() {
        const { args } = await this.parse(Logs);
        const spinner = Spinner({ text: `Finding logs for function "${args.name}"` }).start();
        const { deployedStack } = await readBlueprintOnDisk({ getStack: true });
        if (!deployedStack)
            this.error('Stack not found'); // returns
        const { name, projectId } = deployedStack;
        const { externalId } = findFunctionByName(deployedStack, args.name);
        const result = await logs(externalId, { token: config.token, projectId });
        if (result.ok) {
            spinner.success(`Found logs ${args.name} for blueprint "${name}"`);
            for (const logGroup of result.logs) {
                for (const log of logGroup.events) {
                    const { message, timestamp } = log;
                    // INFO log format:   year  month date  hr    min   sec    ms      req uuid
                    const logPattern = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z\s+[0-9a-f-]+/;
                    if (logPattern.test(message)) {
                        const content = message.replace(logPattern, '').trim().replace(/^INFO/, '').trim();
                        if (content) {
                            const date = new Date(timestamp);
                            const time = date.toLocaleTimeString();
                            const day = date.toLocaleDateString();
                            this.log(`  ${bold(day)} ${yellow(time)} ${content}`);
                        }
                    }
                }
            }
        }
        else {
            spinner.error(`${red('Failed')} to retrieve logs`);
            this.log(`Error: ${result.error || 'Unknown error'}`);
        }
    }
}
