import { Command, Flags } from '@oclif/core';
import { readBlueprintOnDisk } from '../../actions/blueprints/blueprint.js';
import { getStack } from '../../actions/blueprints/stacks.js';
import { formatResourceTree, formatStackInfo } from '../../utils/display/blueprints-formatting.js';
export default class Info extends Command {
    static description = 'Show information about a Blueprint';
    static examples = [
        '<%= config.bin %> <%= command.id %>',
        '<%= config.bin %> <%= command.id %> --id abc123',
    ];
    static flags = {
        id: Flags.string({
            description: 'Stack ID to show info for (defaults to current stack)',
            required: false,
        }),
    };
    async run() {
        const { flags } = await this.parse(Info);
        const { errors, deployedStack, projectId } = await readBlueprintOnDisk({ getStack: true });
        if (errors.length > 0) {
            // printErrors(errors)
            this.warn('Blueprint parse errors:');
            console.dir(errors, { depth: null });
            return;
        }
        if (!projectId)
            this.error('Project resource not found in blueprint');
        let stack = deployedStack;
        if (flags.id) {
            const { ok, stack: foundStack, error } = await getStack({ stackId: flags.id, projectId });
            if (!ok)
                this.error(error || 'Failed to get stack');
            stack = foundStack;
        }
        else if (!stack) {
            this.error('No stack found');
        }
        if (!stack)
            this.error('Stack not found. Is it deployed?');
        this.log(formatStackInfo(stack, true));
        if (stack.resources) {
            this.log('');
            this.log(formatResourceTree(stack.resources));
        }
    }
}
