/** @internal */
export interface PayloadOptions {
    data: string | undefined;
    file: string | undefined;
    timeout?: number | undefined;
}
/** @internal */
export interface InvocationResponse {
    error: undefined | unknown;
    json: object | undefined;
    logs: string | undefined;
}
type LogFunction = (input: string) => void;
/** @internal */
export interface BlueprintsContext {
    log: LogFunction;
}
/** @internal */
export interface Blueprint {
    blueprintVersion: string;
    values: Record<string, unknown>;
    outputs: Array<Record<string, unknown>>;
    resources: Array<BlueprintResource>;
}
/** @internal */
export interface BlueprintDocument {
    resources: Array<BlueprintResource>;
}
/** @internal */
export interface BlueprintJob {
    name: string;
    projectId: string;
    document: BlueprintDocument;
}
/** @internal */
export interface BlueprintResource {
    id: string;
    displayName: string;
    name: string;
    type: string;
    src: string;
    externalId: string;
}
/** @internal */
export interface BlueprintOperation {
    id: string;
    status: string;
    createdAt?: string;
    completedAt?: string;
}
export interface BlueprintStack {
    id: string;
    name: string;
    displayName: string;
    projectId: string;
    resources: Array<BlueprintResource>;
    createdAt?: string;
    updatedAt?: string;
    recentOperation?: BlueprintOperation;
}
/** @internal */
export declare enum BlueprintErrorType {
    MissingProject = "missing_project",
    MissingStack = "missing_stack",
    InvalidProperty = "invalid_property",
    InvalidStack = "invalid_stack"
}
/** @internal */
export interface BlueprintError {
    message: string;
    type: BlueprintErrorType;
}
/** @internal */
export interface BlueprintLog {
    timestamp: string;
    message: string;
    stackId: string;
    level: string;
}
/** @internal */
export interface AuthParams {
    token: string;
    projectId: string;
}
/** @internal */
export interface FunctionLog {
    eventId: string;
    ingestionTime: string;
    timestamp: string;
    message: string;
}
/** @internal */
export interface FunctionLogGroup {
    events: Array<FunctionLog>;
    nextBackwardToken: string;
    nextForwardToken: string;
}
export {};
