import config from '../../config.js';
const { blueprints } = config.server;
export const stacksUrl = `${blueprints}vX/blueprints/stacks`;
function getHeaders(projectId) {
    return {
        Authorization: `Bearer ${config.token}`,
        'Content-Type': 'application/json',
        'X-Sanity-Scope-Type': 'project',
        'X-Sanity-Scope-Id': projectId,
    };
}
export async function listStacks({ projectId }) {
    const response = await fetch(stacksUrl, {
        method: 'GET',
        headers: getHeaders(projectId),
    });
    const stacks = await response.json();
    return {
        ok: response.ok,
        error: response.ok ? null : stacks.error?.message,
        stacks,
    };
}
export async function getStackByName({ name, projectId }) {
    const { ok, stacks, error } = await listStacks({ projectId });
    if (!ok || !stacks) {
        return {
            ok: false,
            error: error || 'Failed to retrieve stacks',
            stack: null,
            stackId: null,
        };
    }
    const foundStack = stacks.find((stack) => stack.name === name);
    if (!foundStack) {
        return {
            ok: true,
            error: null,
            stack: null,
            stackId: null,
            availableStacks: stacks.map((s) => s.name),
        };
    }
    const stackResult = await getStack({ stackId: foundStack.id, projectId });
    return {
        ok: stackResult.ok,
        error: stackResult.error,
        stack: stackResult.stack,
        stackId: foundStack.id,
    };
}
export async function getStack({ stackId, projectId }) {
    const response = await fetch(`${stacksUrl}/${stackId}`, {
        method: 'GET',
        headers: getHeaders(projectId),
    });
    const stack = await response.json();
    return {
        ok: response.ok,
        error: response.ok ? null : stack.message,
        stack,
    };
}
export async function createStack({ blueprint, projectId, }) {
    const response = await fetch(stacksUrl, {
        method: 'POST',
        headers: getHeaders(projectId),
        body: JSON.stringify(blueprint),
    });
    const stack = await response.json();
    return {
        ok: response.ok,
        error: response.ok ? null : stack.message,
        stack,
    };
}
export async function updateStack({ stackId, blueprint, projectId, }) {
    const response = await fetch(`${stacksUrl}/${stackId}`, {
        method: 'PUT',
        headers: getHeaders(projectId),
        body: JSON.stringify(blueprint),
    });
    const stack = await response.json();
    return {
        ok: response.ok,
        error: response.ok ? null : stack.message,
        stack,
    };
}
