import fs from 'node:fs';
import path from 'node:path';
import { cwd } from 'node:process';
import JSZip from 'jszip';
import config from '../../config.js';
const { blueprints } = config.server;
export const stashUrl = `${blueprints}vX/blueprints/assets/stash`;
function getHeaders(projectId) {
    return {
        Authorization: `Bearer ${config.token}`,
        'Content-Type': 'application/json',
        'X-Sanity-Scope-Type': 'project',
        'X-Sanity-Scope-Id': projectId,
    };
}
export async function stashAsset({ resource, projectId, }) {
    try {
        const source = await fs.readFileSync(path.join(cwd(), resource.src), 'utf8');
        const zip = new JSZip();
        zip.file('index.js', source);
        const zipBuffer = await zip.generateAsync({ type: 'nodebuffer' });
        const base64Zip = zipBuffer.toString('base64');
        const assetResponse = await fetch(stashUrl, {
            method: 'POST',
            headers: getHeaders(projectId),
            body: JSON.stringify({
                file: base64Zip,
                filename: `${resource.name}.zip`,
            }),
        });
        const assetJson = await assetResponse.json();
        if (assetResponse.ok) {
            return { success: true, assetId: assetJson.id };
        }
        return { success: false, error: assetJson.message || 'Unknown error' };
    }
    catch (err) {
        let error = '';
        if (err instanceof Error) {
            error = err.message;
        }
        return { success: false, error };
    }
}
