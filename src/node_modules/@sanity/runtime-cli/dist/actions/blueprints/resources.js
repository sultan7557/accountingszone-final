import { mkdirSync, writeFileSync } from 'node:fs';
import { existsSync } from 'node:fs';
import { join } from 'node:path';
import { cwd } from 'node:process';
import { addResourceToBlueprint } from './blueprint.js';
/**
 * Creates a new function resource file and adds it to the blueprint
 */
export function createFunctionResource(options) {
    const { name, type, displayName = name } = options;
    // Ensure functions directory exists
    const functionsDir = join(cwd(), 'functions');
    if (!existsSync(functionsDir)) {
        mkdirSync(functionsDir, { recursive: true });
    }
    // Create function file with default template
    const functionPath = join(functionsDir, `${name}.js`);
    const functionContent = `export async function handler (event) {
  console.log(event)
  return {event}
}`;
    writeFileSync(functionPath, functionContent);
    // Create resource definition
    const resourceJson = {
        displayName,
        name,
        type: `sanity.function.${type}`,
        src: `functions/${name}.js`,
    };
    // Add to blueprint or return for manual addition
    const resource = addResourceToBlueprint({ resource: resourceJson });
    return {
        filePath: functionPath,
        resourceAdded: !resource, // If resource is null, it was added to blueprint
        resource: resource || resourceJson,
    };
}
