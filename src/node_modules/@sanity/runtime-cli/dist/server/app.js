import { existsSync, readFileSync } from 'node:fs';
import { default as mime } from 'mime-types';
import { readBlueprintOnDisk } from '../actions/blueprints/blueprint.js';
import invoke from '../utils/invoke-local.js';
import * as http from 'node:http';
const host = 'localhost';
const app = (port) => {
    const requestListener = async (req, res) => {
        res.setHeader('Content-Type', 'application/json');
        switch (req.url) {
            case '/blueprint': {
                try {
                    const { parsedBlueprint } = await readBlueprintOnDisk({ getStack: false });
                    res.setHeader('Content-Type', 'application/json');
                    res.writeHead(200);
                    res.end(JSON.stringify(parsedBlueprint));
                }
                catch {
                    res.writeHead(404);
                    res.end();
                }
                break;
            }
            case '/invoke': {
                if (req.method === 'POST') {
                    let body = '';
                    req.on('data', (data) => {
                        body += data;
                    });
                    req.on('end', async () => {
                        const { data, func } = JSON.parse(body);
                        res.setHeader('Content-Type', 'application/json');
                        try {
                            const response = await invoke(func, { data: JSON.parse(data) });
                            res.writeHead(200);
                            res.end(JSON.stringify(response));
                        }
                        catch (error) {
                            const response = { logs: '', error: '' };
                            if (error instanceof Error) {
                                response.logs = error.message;
                            }
                            res.writeHead(200);
                            res.end(JSON.stringify(response));
                        }
                    });
                }
                break;
            }
            default: {
                const requestPath = req.url?.endsWith('/') ? `${req.url}index.html` : req.url;
                const filePath = new URL(`./static${requestPath}`, import.meta.url).pathname;
                if (existsSync(filePath)) {
                    const mimeType = mime.lookup(filePath) || 'text/plain';
                    res.setHeader('Content-Type', mimeType);
                    const content = readFileSync(filePath).toString();
                    res.writeHead(200);
                    res.end(content);
                }
                else {
                    res.writeHead(404);
                    res.end();
                }
                break;
            }
        }
    };
    const server = http.createServer(requestListener);
    server.listen(port, host, () => { });
};
export default app;
