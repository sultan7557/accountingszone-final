{"version":3,"file":"PointerEvents.js","sources":["../../src/util/getNodeIcon.tsx","../../src/ui/PopoverPortal.tsx","../../src/ui/telemetry/TelemetryContext.tsx","../../src/ui/telemetry/useTelemetry.tsx","../../src/overlay-components/components/InsertMenu.tsx","../../src/overlay-components/components/PointerEvents.tsx"],"sourcesContent":["import {\n  BlockContentIcon,\n  CheckmarkCircleIcon,\n  CubeIcon,\n  ImageIcon,\n  NumberIcon,\n  StringIcon,\n  ThListIcon,\n} from '@sanity/icons'\nimport type {\n  SchemaArrayItem,\n  SchemaNumberNode,\n  SchemaObjectField,\n  SchemaStringNode,\n  SchemaUnionOption,\n} from '@sanity/presentation-comlink'\n\ntype Option =\n  | SchemaNumberNode\n  | SchemaStringNode\n  | SchemaArrayItem\n  | SchemaObjectField\n  | SchemaUnionOption\n\nexport function getNodeIcon(option: Option | undefined): React.JSX.Element {\n  if (!option) return <CubeIcon />\n\n  if (option.type === 'string') {\n    return <StringIcon />\n  }\n\n  if (option.type === 'number') {\n    return <NumberIcon />\n  }\n\n  const {value: node} = option\n\n  if ('icon' in option && option.icon) {\n    return <div dangerouslySetInnerHTML={{__html: option.icon}} />\n  }\n\n  const {type} = node\n\n  if (type === 'string') {\n    return <StringIcon />\n  }\n\n  if (type === 'boolean') {\n    return <CheckmarkCircleIcon />\n  }\n\n  if (type === 'number') {\n    return <NumberIcon />\n  }\n\n  if (type === 'array' || type === 'union') {\n    const of = Array.isArray(node.of) ? node.of : [node.of]\n    if (of.some((n) => 'name' in n && n.name === 'block')) {\n      return <BlockContentIcon />\n    }\n    return <ThListIcon />\n  }\n\n  if (type === 'object') {\n    if (option.name === 'image') {\n      return <ImageIcon />\n    }\n    if (option.name === 'block') {\n      return <StringIcon />\n    }\n  }\n\n  return <CubeIcon />\n}\n","import {Portal} from '@sanity/ui/_visual-editing'\nimport {type FunctionComponent, type MouseEvent} from 'react'\nimport {styled} from 'styled-components'\n\nconst PortalContainer = styled.div`\n  height: 100%;\n  inset: 0;\n  overflow-y: scroll;\n  overscroll-behavior: contain;\n  pointer-events: all;\n  position: fixed;\n  width: 100%;\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  &:before {\n    content: '';\n    display: block;\n    height: calc(100% + 1px);\n    position: absolute;\n    top: 0;\n    width: 100%;\n    z-index: -1;\n  }\n`\nconst PortalBackground = styled.div`\n  background: transparent;\n  height: 100%;\n  inset: 0;\n  position: absolute;\n  width: 100%;\n`\n\nexport const PopoverPortal: FunctionComponent<{\n  children: React.ReactNode\n  onDismiss?: () => void\n  setBoundaryElement?: (element: HTMLDivElement) => void\n}> = (props) => {\n  const {children, onDismiss, setBoundaryElement} = props\n\n  // Prevent the event from propagating to the window, so that the controller's\n  // `handleBlur` listener is not triggered. This is needed to prevent the\n  // context menu from being dismissed when some click causes parent elements to\n  // re-render, and the data-attribute method of preventing propagation fails.\n  const handleClick = (event: MouseEvent) => {\n    event.stopPropagation()\n  }\n\n  return (\n    <Portal>\n      <PortalContainer data-sanity-overlay-element ref={setBoundaryElement} onClick={handleClick}>\n        <PortalBackground onClickCapture={onDismiss} />\n        {children}\n      </PortalContainer>\n    </Portal>\n  )\n}\n","import {defineEvent} from '@sanity/telemetry'\nimport {createContext} from 'react'\n\nexport const events = {\n  'Visual Editing Drag Sequence Completed': defineEvent({\n    name: 'Visual Editing Drag Sequence Completed',\n    description: 'An array is successfully reordered using drag and drop.',\n    version: 1,\n  }),\n  'Visual Editing Drag Minimap Enabled': defineEvent({\n    name: 'Visual Editing Drag Minimap Enabled',\n    description: 'The zoomed-out minimap view is enabled during a drag sequence.',\n    version: 1,\n  }),\n  'Visual Editing Context Menu Item Removed': defineEvent({\n    name: 'Visual Editing Context Menu Item Removed',\n    description: 'An item is removed using the Context Menu.',\n    version: 1,\n  }),\n  'Visual Editing Context Menu Item Duplicated': defineEvent({\n    name: 'Visual Editing Context Menu Item Duplicated',\n    description: 'An item is duplicated using the Context Menu.',\n    version: 1,\n  }),\n  'Visual Editing Context Menu Item Moved': defineEvent({\n    name: 'Visual Editing Context Menu Item Moved',\n    description: 'An item is moved using the Context Menu.',\n    version: 1,\n  }),\n  'Visual Editing Context Menu Item Inserted': defineEvent({\n    name: 'Visual Editing Context Menu Item Inserted',\n    description: 'An item is inserted using the Context Menu.',\n    version: 1,\n  }),\n  'Visual Editing Insert Menu Item Inserted': defineEvent({\n    name: 'Visual Editing Insert Menu Item Inserted',\n    description: 'An item is inserted using the Insert Menu.',\n    version: 1,\n  }),\n  'Visual Editing Overlay Clicked': defineEvent({\n    name: 'Visual Editing Overlay Clicked',\n    description: 'An Overlay is clicked.',\n    version: 1,\n  }),\n}\n\ntype EventDataMap = {\n  [K in keyof typeof events]: (typeof events)[K] extends ReturnType<typeof defineEvent<infer T>>\n    ? T\n    : never\n}\n\nexport type TelemetryEventNames = keyof typeof events\n\nexport type TelemetryContextValue = <K extends keyof typeof events>(\n  name: K,\n  data: EventDataMap[K] extends void ? null | undefined : EventDataMap[K],\n) => void\n\nexport const TelemetryContext = createContext<TelemetryContextValue | undefined>(undefined)\n","import {useContext} from 'react'\nimport {TelemetryContext, type TelemetryContextValue} from './TelemetryContext'\n\nexport function useTelemetry(): TelemetryContextValue {\n  const context = useContext(TelemetryContext)\n\n  if (!context) {\n    throw new Error('Telemetry context is missing')\n  }\n\n  return context\n}\n","import type {InsertMenuOptions} from '@sanity/insert-menu'\nimport {InsertMenu as SanityInsertMenu} from '@sanity/insert-menu'\nimport type {SchemaUnionNode} from '@sanity/presentation-comlink'\nimport type {SchemaType} from '@sanity/types'\nimport {Popover} from '@sanity/ui/_visual-editing'\nimport {type FunctionComponent} from 'react'\nimport {PopoverPortal} from '../../ui/PopoverPortal'\nimport {getNodeIcon} from '../../util/getNodeIcon'\n\n// @todo How can this be localised?\nconst labels = {\n  'insert-menu.filter.all-items': 'All',\n  'insert-menu.search.no-results': 'No results',\n  'insert-menu.search.placeholder': 'Filter typesâ€¦',\n  'insert-menu.toggle-grid-view.tooltip': 'Toggle grid view',\n  'insert-menu.toggle-list-view.tooltip': 'Toggle list view',\n} as const\n\nexport interface InsertMenuProps {\n  node: SchemaUnionNode\n  onSelect: (schemaType: SchemaType) => void\n}\n\nexport const InsertMenu: FunctionComponent<InsertMenuProps> = (props) => {\n  const {node, onSelect} = props\n\n  const insertMenuOptions = node.options?.insertMenu || {}\n\n  const views: InsertMenuOptions['views'] = insertMenuOptions.views?.map((view) => {\n    // Map the `previewImageUrls` that Presentation already resolved and\n    // serialized back to a function so that InsertMenu can \"resolve\" them\n    if (view.name === 'grid') {\n      return {\n        ...view,\n        previewImageUrl: (name) => view.previewImageUrls?.[name],\n      }\n    }\n    return view\n  })\n\n  return (\n    <SanityInsertMenu\n      {...insertMenuOptions}\n      labels={labels}\n      // @ts-expect-error -- @todo map typings\n      schemaTypes={node.of.map((type) => ({\n        ...type,\n        icon: getNodeIcon(type),\n      }))}\n      onSelect={onSelect}\n      views={views}\n    />\n  )\n}\n\nexport interface InsertMenuPopoverProps extends InsertMenuProps {\n  onDismiss: () => void\n  referenceElement?: HTMLElement | null\n}\n\nexport const InsertMenuPopover: FunctionComponent<InsertMenuPopoverProps> = (props) => {\n  const {node, onDismiss, onSelect, referenceElement} = props\n\n  const popoverContent = <InsertMenu node={node} onSelect={onSelect} />\n\n  const insertMenuOptions = node.options?.insertMenu || {}\n\n  // If the grid view is not enabled, the popover should fit the content. If it\n  // is enabled, the popover width needs to be 'forced' to some arbitrary amount\n  // to prevent the grid from collapsing to a single column. The '0' size allows\n  // for a two column layout\n  const width = insertMenuOptions.views?.some((view) => view.name === 'grid') ? 0 : undefined\n\n  return (\n    <PopoverPortal onDismiss={onDismiss}>\n      <Popover\n        animate={true}\n        constrainSize\n        content={popoverContent}\n        fallbackPlacements={['bottom']}\n        open\n        placement={'top'}\n        preventOverflow\n        referenceElement={referenceElement}\n        width={width}\n      />\n    </PopoverPortal>\n  )\n}\n","import type {FunctionComponent, HTMLAttributes, PropsWithChildren} from 'react'\n\nexport const PointerEvents: FunctionComponent<\n  PropsWithChildren<HTMLAttributes<HTMLDivElement>>\n> = ({children, style, ...rest}) => {\n  return (\n    <div style={{...style, pointerEvents: 'all'}} data-sanity-overlay-element {...rest}>\n      {children}\n    </div>\n  )\n}\n"],"names":["getNodeIcon","option","type","value","node","icon","__html","Array","isArray","of","some","n","name","PortalContainer","styled","div","PortalBackground","PopoverPortal","props","$","_c","children","onDismiss","setBoundaryElement","handleClick","_temp","t0","t1","event","stopPropagation","events","defineEvent","description","version","TelemetryContext","createContext","undefined","useTelemetry","context","useContext","Error","labels","InsertMenu","onSelect","options","insertMenu","insertMenuOptions","views","map","t2","_temp2","t3","SanityInsertMenu","InsertMenuPopover","referenceElement","popoverContent","width","_temp3","Symbol","for","view","previewImageUrl","previewImageUrls","PointerEvents","rest","style","pointerEvents"],"mappings":"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"}