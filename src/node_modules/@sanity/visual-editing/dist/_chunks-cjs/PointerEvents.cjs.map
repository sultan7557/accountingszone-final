{"version":3,"file":"PointerEvents.cjs","sources":["../../src/util/getNodeIcon.tsx","../../src/ui/PopoverPortal.tsx","../../src/ui/telemetry/TelemetryContext.tsx","../../src/ui/telemetry/useTelemetry.tsx","../../src/overlay-components/components/InsertMenu.tsx","../../src/overlay-components/components/PointerEvents.tsx"],"sourcesContent":["import {\n  BlockContentIcon,\n  CheckmarkCircleIcon,\n  CubeIcon,\n  ImageIcon,\n  NumberIcon,\n  StringIcon,\n  ThListIcon,\n} from '@sanity/icons'\nimport type {\n  SchemaArrayItem,\n  SchemaNumberNode,\n  SchemaObjectField,\n  SchemaStringNode,\n  SchemaUnionOption,\n} from '@sanity/presentation-comlink'\n\ntype Option =\n  | SchemaNumberNode\n  | SchemaStringNode\n  | SchemaArrayItem\n  | SchemaObjectField\n  | SchemaUnionOption\n\nexport function getNodeIcon(option: Option | undefined): React.JSX.Element {\n  if (!option) return <CubeIcon />\n\n  if (option.type === 'string') {\n    return <StringIcon />\n  }\n\n  if (option.type === 'number') {\n    return <NumberIcon />\n  }\n\n  const {value: node} = option\n\n  if ('icon' in option && option.icon) {\n    return <div dangerouslySetInnerHTML={{__html: option.icon}} />\n  }\n\n  const {type} = node\n\n  if (type === 'string') {\n    return <StringIcon />\n  }\n\n  if (type === 'boolean') {\n    return <CheckmarkCircleIcon />\n  }\n\n  if (type === 'number') {\n    return <NumberIcon />\n  }\n\n  if (type === 'array' || type === 'union') {\n    const of = Array.isArray(node.of) ? node.of : [node.of]\n    if (of.some((n) => 'name' in n && n.name === 'block')) {\n      return <BlockContentIcon />\n    }\n    return <ThListIcon />\n  }\n\n  if (type === 'object') {\n    if (option.name === 'image') {\n      return <ImageIcon />\n    }\n    if (option.name === 'block') {\n      return <StringIcon />\n    }\n  }\n\n  return <CubeIcon />\n}\n","import {Portal} from '@sanity/ui/_visual-editing'\nimport {type FunctionComponent, type MouseEvent} from 'react'\nimport {styled} from 'styled-components'\n\nconst PortalContainer = styled.div`\n  height: 100%;\n  inset: 0;\n  overflow-y: scroll;\n  overscroll-behavior: contain;\n  pointer-events: all;\n  position: fixed;\n  width: 100%;\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  &:before {\n    content: '';\n    display: block;\n    height: calc(100% + 1px);\n    position: absolute;\n    top: 0;\n    width: 100%;\n    z-index: -1;\n  }\n`\nconst PortalBackground = styled.div`\n  background: transparent;\n  height: 100%;\n  inset: 0;\n  position: absolute;\n  width: 100%;\n`\n\nexport const PopoverPortal: FunctionComponent<{\n  children: React.ReactNode\n  onDismiss?: () => void\n  setBoundaryElement?: (element: HTMLDivElement) => void\n}> = (props) => {\n  const {children, onDismiss, setBoundaryElement} = props\n\n  // Prevent the event from propagating to the window, so that the controller's\n  // `handleBlur` listener is not triggered. This is needed to prevent the\n  // context menu from being dismissed when some click causes parent elements to\n  // re-render, and the data-attribute method of preventing propagation fails.\n  const handleClick = (event: MouseEvent) => {\n    event.stopPropagation()\n  }\n\n  return (\n    <Portal>\n      <PortalContainer data-sanity-overlay-element ref={setBoundaryElement} onClick={handleClick}>\n        <PortalBackground onClickCapture={onDismiss} />\n        {children}\n      </PortalContainer>\n    </Portal>\n  )\n}\n","import {defineEvent} from '@sanity/telemetry'\nimport {createContext} from 'react'\n\nexport const events = {\n  'Visual Editing Drag Sequence Completed': defineEvent({\n    name: 'Visual Editing Drag Sequence Completed',\n    description: 'An array is successfully reordered using drag and drop.',\n    version: 1,\n  }),\n  'Visual Editing Drag Minimap Enabled': defineEvent({\n    name: 'Visual Editing Drag Minimap Enabled',\n    description: 'The zoomed-out minimap view is enabled during a drag sequence.',\n    version: 1,\n  }),\n  'Visual Editing Context Menu Item Removed': defineEvent({\n    name: 'Visual Editing Context Menu Item Removed',\n    description: 'An item is removed using the Context Menu.',\n    version: 1,\n  }),\n  'Visual Editing Context Menu Item Duplicated': defineEvent({\n    name: 'Visual Editing Context Menu Item Duplicated',\n    description: 'An item is duplicated using the Context Menu.',\n    version: 1,\n  }),\n  'Visual Editing Context Menu Item Moved': defineEvent({\n    name: 'Visual Editing Context Menu Item Moved',\n    description: 'An item is moved using the Context Menu.',\n    version: 1,\n  }),\n  'Visual Editing Context Menu Item Inserted': defineEvent({\n    name: 'Visual Editing Context Menu Item Inserted',\n    description: 'An item is inserted using the Context Menu.',\n    version: 1,\n  }),\n  'Visual Editing Insert Menu Item Inserted': defineEvent({\n    name: 'Visual Editing Insert Menu Item Inserted',\n    description: 'An item is inserted using the Insert Menu.',\n    version: 1,\n  }),\n  'Visual Editing Overlay Clicked': defineEvent({\n    name: 'Visual Editing Overlay Clicked',\n    description: 'An Overlay is clicked.',\n    version: 1,\n  }),\n}\n\ntype EventDataMap = {\n  [K in keyof typeof events]: (typeof events)[K] extends ReturnType<typeof defineEvent<infer T>>\n    ? T\n    : never\n}\n\nexport type TelemetryEventNames = keyof typeof events\n\nexport type TelemetryContextValue = <K extends keyof typeof events>(\n  name: K,\n  data: EventDataMap[K] extends void ? null | undefined : EventDataMap[K],\n) => void\n\nexport const TelemetryContext = createContext<TelemetryContextValue | undefined>(undefined)\n","import {useContext} from 'react'\nimport {TelemetryContext, type TelemetryContextValue} from './TelemetryContext'\n\nexport function useTelemetry(): TelemetryContextValue {\n  const context = useContext(TelemetryContext)\n\n  if (!context) {\n    throw new Error('Telemetry context is missing')\n  }\n\n  return context\n}\n","import type {InsertMenuOptions} from '@sanity/insert-menu'\nimport {InsertMenu as SanityInsertMenu} from '@sanity/insert-menu'\nimport type {SchemaUnionNode} from '@sanity/presentation-comlink'\nimport type {SchemaType} from '@sanity/types'\nimport {Popover} from '@sanity/ui/_visual-editing'\nimport {type FunctionComponent} from 'react'\nimport {PopoverPortal} from '../../ui/PopoverPortal'\nimport {getNodeIcon} from '../../util/getNodeIcon'\n\n// @todo How can this be localised?\nconst labels = {\n  'insert-menu.filter.all-items': 'All',\n  'insert-menu.search.no-results': 'No results',\n  'insert-menu.search.placeholder': 'Filter typesâ€¦',\n  'insert-menu.toggle-grid-view.tooltip': 'Toggle grid view',\n  'insert-menu.toggle-list-view.tooltip': 'Toggle list view',\n} as const\n\nexport interface InsertMenuProps {\n  node: SchemaUnionNode\n  onSelect: (schemaType: SchemaType) => void\n}\n\nexport const InsertMenu: FunctionComponent<InsertMenuProps> = (props) => {\n  const {node, onSelect} = props\n\n  const insertMenuOptions = node.options?.insertMenu || {}\n\n  const views: InsertMenuOptions['views'] = insertMenuOptions.views?.map((view) => {\n    // Map the `previewImageUrls` that Presentation already resolved and\n    // serialized back to a function so that InsertMenu can \"resolve\" them\n    if (view.name === 'grid') {\n      return {\n        ...view,\n        previewImageUrl: (name) => view.previewImageUrls?.[name],\n      }\n    }\n    return view\n  })\n\n  return (\n    <SanityInsertMenu\n      {...insertMenuOptions}\n      labels={labels}\n      // @ts-expect-error -- @todo map typings\n      schemaTypes={node.of.map((type) => ({\n        ...type,\n        icon: getNodeIcon(type),\n      }))}\n      onSelect={onSelect}\n      views={views}\n    />\n  )\n}\n\nexport interface InsertMenuPopoverProps extends InsertMenuProps {\n  onDismiss: () => void\n  referenceElement?: HTMLElement | null\n}\n\nexport const InsertMenuPopover: FunctionComponent<InsertMenuPopoverProps> = (props) => {\n  const {node, onDismiss, onSelect, referenceElement} = props\n\n  const popoverContent = <InsertMenu node={node} onSelect={onSelect} />\n\n  const insertMenuOptions = node.options?.insertMenu || {}\n\n  // If the grid view is not enabled, the popover should fit the content. If it\n  // is enabled, the popover width needs to be 'forced' to some arbitrary amount\n  // to prevent the grid from collapsing to a single column. The '0' size allows\n  // for a two column layout\n  const width = insertMenuOptions.views?.some((view) => view.name === 'grid') ? 0 : undefined\n\n  return (\n    <PopoverPortal onDismiss={onDismiss}>\n      <Popover\n        animate={true}\n        constrainSize\n        content={popoverContent}\n        fallbackPlacements={['bottom']}\n        open\n        placement={'top'}\n        preventOverflow\n        referenceElement={referenceElement}\n        width={width}\n      />\n    </PopoverPortal>\n  )\n}\n","import type {FunctionComponent, HTMLAttributes, PropsWithChildren} from 'react'\n\nexport const PointerEvents: FunctionComponent<\n  PropsWithChildren<HTMLAttributes<HTMLDivElement>>\n> = ({children, style, ...rest}) => {\n  return (\n    <div style={{...style, pointerEvents: 'all'}} data-sanity-overlay-element {...rest}>\n      {children}\n    </div>\n  )\n}\n"],"names":["getNodeIcon","option","jsx","CubeIcon","type","StringIcon","NumberIcon","value","node","icon","__html","CheckmarkCircleIcon","Array","isArray","of","some","n","name","BlockContentIcon","ThListIcon","ImageIcon","PortalContainer","styled","div","PortalBackground","PopoverPortal","props","$","_c","children","onDismiss","setBoundaryElement","handleClick","_temp","t0","t1","Portal","jsxs","event","stopPropagation","events","defineEvent","description","version","TelemetryContext","createContext","undefined","useTelemetry","context","useContext","Error","labels","InsertMenu","onSelect","options","insertMenu","insertMenuOptions","views","map","t2","_temp2","t3","SanityInsertMenu","InsertMenuPopover","referenceElement","popoverContent","width","_temp3","Symbol","for","Popover","view","previewImageUrl","previewImageUrls","PointerEvents","rest","style","pointerEvents"],"mappings":"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"}