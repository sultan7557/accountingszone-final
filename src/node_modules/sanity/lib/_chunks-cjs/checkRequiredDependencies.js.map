{"version":3,"file":"checkRequiredDependencies.js","sources":["../../src/_internal/cli/util/readPackageJson.ts","../../src/_internal/cli/util/checkStudioDependencyVersions.ts","../../src/_internal/cli/util/checkRequiredDependencies.ts"],"sourcesContent":["import fs from 'node:fs'\n\nimport {type PackageJson} from '@sanity/cli'\n\n/**\n * Read the `package.json` file at the given path\n *\n * @param filePath - Path to package.json to read\n * @returns The parsed package.json\n */\nexport function readPackageJson(filePath: string): PackageJson {\n  try {\n    // eslint-disable-next-line no-sync\n    return JSON.parse(fs.readFileSync(filePath, 'utf8'))\n  } catch (err) {\n    throw new Error(`Failed to read \"${filePath}\": ${err.message}`)\n  }\n}\n","import path from 'node:path'\n\nimport {generateHelpUrl} from '@sanity/generate-help-url'\nimport resolveFrom from 'resolve-from'\nimport semver, {type SemVer} from 'semver'\n\nimport {readPackageJson} from './readPackageJson'\n\ninterface PackageInfo {\n  name: string\n  supported: string[]\n  deprecatedBelow: null | string\n  installed: SemVer\n  isUnsupported: boolean\n  isDeprecated: boolean\n  isUntested: boolean\n}\n\n// NOTE: when doing changes here, also remember to update versions in help docs at\n// https://sanity.io/admin/structure/docs;helpArticle;upgrade-packages\nconst PACKAGES = [\n  {name: 'react', supported: ['^18 || ^19'], deprecatedBelow: null},\n  {name: 'react-dom', supported: ['^18 || ^19'], deprecatedBelow: null},\n  {name: 'styled-components', supported: ['^6'], deprecatedBelow: null},\n  {name: '@sanity/ui', supported: ['^2'], deprecatedBelow: null},\n]\n\nexport function checkStudioDependencyVersions(workDir: string): void {\n  const manifest = readPackageJson(path.join(workDir, 'package.json'))\n  const dependencies = {...manifest.dependencies, ...manifest.devDependencies}\n\n  const packageInfo = PACKAGES.map((pkg): PackageInfo | false => {\n    const dependency = dependencies[pkg.name]\n    if (!dependency) {\n      return false\n    }\n\n    const manifestPath = resolveFrom.silent(workDir, path.join(pkg.name, 'package.json'))\n    const installed = semver.coerce(\n      manifestPath ? readPackageJson(manifestPath).version : dependency.replace(/[\\D.]/g, ''),\n    )\n\n    if (!installed) {\n      return false\n    }\n\n    const supported = pkg.supported.join(' || ')\n\n    // \"Untested\" is usually the case where we have not upgraded the React version requirements\n    // before a release, but given that is usually works in a backwards-compatible way, we want\n    // to indicate that it's _untested_, not necessarily _unsupported_\n    // Ex: Installed is react@19.0.0, but we've only _tested_ with react@^18\n    const isUntested = !semver.satisfies(installed, supported) && semver.gtr(installed, supported)\n\n    // \"Unsupported\" in that the installed version is _lower than_ the minimum version\n    // Ex: Installed is react@15.0.0, but we require react@^16\n    const isUnsupported = !semver.satisfies(installed, supported) && !isUntested\n\n    // \"Deprecated\" in that we will stop supporting it at some point in the near future,\n    // so users should be prompted to upgrade\n    const isDeprecated = pkg.deprecatedBelow ? semver.ltr(installed, pkg.deprecatedBelow) : false\n\n    return {\n      ...pkg,\n      installed,\n      isUnsupported,\n      isDeprecated,\n      isUntested,\n    }\n  })\n\n  const installedPackages = packageInfo.filter((inp): inp is PackageInfo => inp !== false)\n  const unsupported = installedPackages.filter((pkg) => pkg.isUnsupported)\n  const deprecated = installedPackages.filter((pkg) => !pkg.isUnsupported && pkg.isDeprecated)\n  const untested = installedPackages.filter((pkg) => pkg.isUntested)\n\n  if (deprecated.length > 0) {\n    // eslint-disable-next-line no-console\n    console.warn(`\n[WARN] The following package versions have been deprecated and should be upgraded:\n\n  ${listPackages(deprecated)}\n\nSupport for these will be removed in a future release!\n\n  ${getUpgradeInstructions(deprecated)}\n`)\n  }\n\n  if (untested.length > 0) {\n    // eslint-disable-next-line no-console\n    console.warn(`\n[WARN] The following package versions have not yet been marked as supported:\n\n  ${listPackages(untested)}\n\nYou _may_ encounter bugs while using these versions.\n\n  ${getDowngradeInstructions(untested)}\n`)\n  }\n\n  if (unsupported.length > 0) {\n    // eslint-disable-next-line no-console\n    console.error(`\n[ERROR] The following package versions are no longer supported and needs to be upgraded:\n\n  ${listPackages(unsupported)}\n\n  ${getUpgradeInstructions(unsupported)}\n`)\n    process.exit(1)\n  }\n}\n\nfunction listPackages(pkgs: PackageInfo[]) {\n  return pkgs\n    .map(\n      (pkg) =>\n        `${pkg.name} (installed: ${pkg.installed}, want: ${\n          pkg.deprecatedBelow || pkg.supported.join(' || ')\n        })`,\n    )\n    .join('\\n  ')\n}\n\nfunction getUpgradeInstructions(pkgs: PackageInfo[]) {\n  const inst = pkgs\n    .map((pkg) => {\n      const [highestSupported] = pkg.supported\n        .map((version) => (semver.coerce(version) || {version: ''}).version)\n        .sort(semver.rcompare)\n\n      return `\"${pkg.name}@${highestSupported}\"`\n    })\n    .join(' ')\n\n  return `To upgrade, run either:\n\n  npm install ${inst}\n\n  or\n\n  yarn add ${inst}\n\n  or\n\n  pnpm add ${inst}\n\n\nRead more at ${generateHelpUrl('upgrade-packages')}`\n}\n\nfunction getDowngradeInstructions(pkgs: PackageInfo[]) {\n  const inst = pkgs\n    .map((pkg) => {\n      const [highestSupported] = pkg.supported\n        .map((version) => (semver.coerce(version) || {version: ''}).version)\n        .sort(semver.rcompare)\n\n      return `\"${pkg.name}@${highestSupported}\"`\n    })\n    .join(' ')\n\n  return `To downgrade, run either:\n\n  yarn add ${inst}\n\n  or\n\n  npm install ${inst}\n\n  or\n\n  pnpm install ${inst}`\n}\n","import {readFile} from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {type CliCommandContext, type PackageJson} from '@sanity/cli'\nimport execa from 'execa'\nimport oneline from 'oneline'\nimport resolveFrom from 'resolve-from'\nimport semver, {type SemVer} from 'semver'\n\nimport {peerDependencies} from '../../../../package.json'\nimport {determineIsApp} from './determineIsApp'\n\nconst defaultStudioManifestProps: PartialPackageManifest = {\n  name: 'studio',\n  version: '1.0.0',\n}\n\ninterface CheckResult {\n  didInstall: boolean\n  installedSanityVersion: string\n}\n\n/**\n * Checks that the studio has declared and installed the required dependencies\n * needed by the Sanity modules. While we generally use regular, explicit\n * dependencies in modules, there are certain dependencies that are better\n * served being peer dependencies, such as react and styled-components.\n *\n * If these dependencies are not installed/declared, we want to prompt the user\n * whether or not to add them to `package.json` and install them\n *\n * Additionally, returns the version of the 'sanity' dependency from the package.json.\n */\nexport async function checkRequiredDependencies(context: CliCommandContext): Promise<CheckResult> {\n  // currently there's no check needed for core apps,\n  // but this should be removed once they are more mature\n  const isApp = determineIsApp(context.cliConfig)\n  if (isApp) {\n    return {didInstall: false, installedSanityVersion: ''}\n  }\n\n  const {workDir: studioPath, output} = context\n  const [studioPackageManifest, installedStyledComponentsVersion, installedSanityVersion] =\n    await Promise.all([\n      await readPackageManifest(path.join(studioPath, 'package.json'), defaultStudioManifestProps),\n      await readModuleVersion(studioPath, 'styled-components'),\n      await readModuleVersion(studioPath, 'sanity'),\n    ])\n\n  const wantedStyledComponentsVersionRange = peerDependencies['styled-components']\n\n  // Retrieve the version of the 'sanity' dependency\n  if (!installedSanityVersion) {\n    throw new Error('Failed to read the installed sanity version.')\n  }\n\n  // The studio _must_ now declare `styled-components` as a dependency. If it's not there,\n  // we'll want to automatically _add it_ to the manifest and tell the user to reinstall\n  // dependencies before running whatever command was being run\n  const declaredStyledComponentsVersion =\n    studioPackageManifest.dependencies['styled-components'] ||\n    studioPackageManifest.devDependencies['styled-components']\n\n  if (!declaredStyledComponentsVersion) {\n    const [file, ...args] = process.argv\n    const deps = {'styled-components': wantedStyledComponentsVersionRange}\n    await installDependencies(deps, context)\n\n    // Re-run the same command (sanity dev/sanity build etc) after installation,\n    // as it can have shifted the entire `node_modules` folder around, result in\n    // broken assumptions about installation paths. This is a hack, and should be\n    // solved properly.\n    await execa(file, args, {cwd: studioPath, stdio: 'inherit'})\n    return {didInstall: true, installedSanityVersion}\n  }\n\n  // Theoretically the version specified in package.json could be incorrect, eg `foo`\n  let minDeclaredStyledComponentsVersion: SemVer | null = null\n  try {\n    minDeclaredStyledComponentsVersion = semver.minVersion(declaredStyledComponentsVersion)\n  } catch (err) {\n    // Intentional fall-through (variable will be left as null, throwing below)\n  }\n\n  if (!minDeclaredStyledComponentsVersion) {\n    throw new Error(oneline`\n      Declared dependency \\`styled-components\\` has an invalid version range:\n      \\`${declaredStyledComponentsVersion}\\`.\n    `)\n  }\n\n  // The declared version should be semver-compatible with the version specified as a\n  // peer dependency in `sanity`. If not, we should tell the user to change it.\n  //\n  // Exception: Ranges are hard to compare. `>=5.0.0 && <=5.3.2 || ^6`... Comparing this\n  // to anything is going to be challenging, so only compare \"simple\" ranges/versions\n  // (^x.x.x / ~x.x.x / x.x.x)\n  if (\n    isComparableRange(declaredStyledComponentsVersion) &&\n    !semver.satisfies(minDeclaredStyledComponentsVersion, wantedStyledComponentsVersionRange)\n  ) {\n    output.warn(oneline`\n      Declared version of styled-components (${declaredStyledComponentsVersion})\n      is not compatible with the version required by sanity (${wantedStyledComponentsVersionRange}).\n      This might cause problems!\n    `)\n  }\n\n  // Ensure the studio has _installed_ a version of `styled-components`\n  if (!installedStyledComponentsVersion) {\n    throw new Error(oneline`\n      Declared dependency \\`styled-components\\` is not installed - run\n      \\`npm install\\`, \\`yarn install\\` or \\`pnpm install\\` to install it before re-running this command.\n    `)\n  }\n\n  // The studio should have an _installed_ version of `styled-components`, and it should\n  // be semver compatible with the version specified in `sanity` peer dependencies.\n  if (!semver.satisfies(installedStyledComponentsVersion, wantedStyledComponentsVersionRange)) {\n    output.warn(oneline`\n      Installed version of styled-components (${installedStyledComponentsVersion})\n      is not compatible with the version required by sanity (${wantedStyledComponentsVersionRange}).\n      This might cause problems!\n    `)\n  }\n\n  return {didInstall: false, installedSanityVersion}\n}\n\n/**\n * Reads the version number of the _installed_ module, or returns `null` if not found\n *\n * @param studioPath - Path of the studio\n * @param moduleName - Name of module to get installed version for\n * @returns Version number, of null\n */\nasync function readModuleVersion(studioPath: string, moduleName: string): Promise<string | null> {\n  const manifestPath = resolveFrom.silent(studioPath, path.join(moduleName, 'package.json'))\n  return manifestPath ? (await readPackageManifest(manifestPath)).version : null\n}\n\n/**\n * Read the `package.json` file at the given path and return an object that guarantees\n * the presence of name, version, dependencies, dev dependencies and peer dependencies\n *\n * @param packageJsonPath - Path to package.json to read\n * @returns Reduced package.json with guarantees for name, version and dependency fields\n */\nasync function readPackageManifest(\n  packageJsonPath: string,\n  defaults: Partial<PartialPackageManifest> = {},\n): Promise<PackageManifest> {\n  let manifest: unknown\n  try {\n    manifest = {...defaults, ...(await readPackageJson(packageJsonPath))}\n  } catch (err) {\n    throw new Error(`Failed to read \"${packageJsonPath}\": ${err.message}`)\n  }\n\n  if (!isPackageManifest(manifest)) {\n    throw new Error(`Failed to read \"${packageJsonPath}\": Invalid package manifest`)\n  }\n\n  const {name, version, dependencies = {}, devDependencies = {}} = manifest\n  return {name, version, dependencies, devDependencies}\n}\n\n/**\n * Install the passed dependencies at the given version/version range,\n * prompting the user which package manager to use. We will try to detect\n * a package manager from files in the directory and show that as the default\n *\n * @param dependencies - Object of dependencies `({[package name]: version})`\n * @param context - CLI context\n */\nasync function installDependencies(\n  dependencies: Record<string, string>,\n  context: CliCommandContext,\n): Promise<void> {\n  const {output, prompt, workDir, cliPackageManager} = context\n  const packages: string[] = []\n\n  output.print('The Sanity studio needs to install missing dependencies:')\n  for (const [pkgName, version] of Object.entries(dependencies)) {\n    const declaration = `${pkgName}@${version}`\n    output.print(`- ${declaration}`)\n    packages.push(declaration)\n  }\n\n  if (!cliPackageManager) {\n    output.error(\n      'ERROR: Could not determine package manager choice - run `npm install` or equivalent',\n    )\n    return\n  }\n\n  const {getPackageManagerChoice, installNewPackages} = cliPackageManager\n  const {mostOptimal, chosen: pkgManager} = await getPackageManagerChoice(workDir, {prompt})\n  if (mostOptimal && pkgManager !== mostOptimal) {\n    output.warn(\n      `WARN: This project appears to be installed with or using ${mostOptimal} - using a different package manager _may_ result in errors.`,\n    )\n  }\n\n  await installNewPackages({packages, packageManager: pkgManager}, context)\n}\n\nfunction isPackageManifest(item: unknown): item is PartialPackageManifest {\n  return typeof item === 'object' && item !== null && 'name' in item && 'version' in item\n}\n\nfunction isComparableRange(range: string): boolean {\n  return /^[\\^~]?\\d+(\\.\\d+)?(\\.\\d+)?$/.test(range)\n}\n\nfunction readPackageJson(filePath: string): Promise<PackageJson> {\n  return readFile(filePath, 'utf8').then((res) => JSON.parse(res))\n}\n\ninterface PackageManifest extends DependencyDeclarations {\n  name: string\n  version: string\n}\n\ninterface PartialPackageManifest extends Partial<DependencyDeclarations> {\n  name: string\n  version: string\n}\n\ninterface DependencyDeclarations {\n  dependencies: Record<string, string | undefined>\n  devDependencies: Record<string, string | undefined>\n}\n"],"names":["readPackageJson","filePath","JSON","parse","fs","readFileSync","err","Error","message","PACKAGES","name","supported","deprecatedBelow","checkStudioDependencyVersions","workDir","manifest","path","join","dependencies","devDependencies","installedPackages","map","pkg","dependency","manifestPath","resolveFrom","silent","installed","semver","coerce","version","replace","isUntested","satisfies","gtr","isUnsupported","isDeprecated","ltr","filter","inp","unsupported","deprecated","untested","length","console","warn","listPackages","getUpgradeInstructions","getDowngradeInstructions","error","process","exit","pkgs","inst","highestSupported","sort","rcompare","generateHelpUrl","defaultStudioManifestProps","checkRequiredDependencies","context","determineIsApp","cliConfig","didInstall","installedSanityVersion","studioPath","output","studioPackageManifest","installedStyledComponentsVersion","Promise","all","readPackageManifest","readModuleVersion","wantedStyledComponentsVersionRange","peerDependencies","declaredStyledComponentsVersion","file","args","argv","installDependencies","execa","cwd","stdio","minDeclaredStyledComponentsVersion","minVersion","oneline","isComparableRange","moduleName","packageJsonPath","defaults","isPackageManifest","prompt","cliPackageManager","packages","print","pkgName","Object","entries","declaration","push","getPackageManagerChoice","installNewPackages","mostOptimal","chosen","pkgManager","packageManager","item","range","test","readFile","then","res"],"mappings":"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"}