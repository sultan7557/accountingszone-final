{"version":3,"file":"buildAction.js","sources":["../../src/_internal/cli/actions/build/build.telemetry.ts","../../src/_internal/cli/server/buildVendorDependencies.ts","../../src/_internal/cli/util/compareStudioDependencyVersions.ts","../../src/_internal/cli/util/getAutoUpdatesImportMap.ts","../../src/_internal/cli/util/shouldAutoUpdate.ts","../../src/_internal/cli/actions/build/buildAction.ts"],"sourcesContent":["import {defineTrace} from '@sanity/telemetry'\n\nexport const BuildTrace = defineTrace<{outputSize: number}>({\n  name: 'Studio Build Completed',\n  version: 0,\n  description: 'A Studio build completed',\n})\n","import fs from 'node:fs'\nimport path from 'node:path'\n\nimport resolveFrom from 'resolve-from'\nimport semver from 'semver'\n\nimport {createExternalFromImportMap} from './createExternalFromImportMap'\n\n// Directory where vendor packages will be stored\nconst VENDOR_DIR = 'vendor'\n\n/**\n * A type representing the imports of vendor packages, defining specific entry\n * points for various versions and subpaths of the packages.\n *\n * The `VendorImports` object is used to build ESM browser-compatible versions\n * of the specified packages. This approach ensures that the appropriate version\n * and entry points are used for each package, enabling compatibility and proper\n * functionality in the browser environment.\n *\n * ## Rationale\n *\n * The rationale for this structure is to handle different versions of the\n * packages carefully, especially major versions. Major version bumps often\n * introduce breaking changes, so the module scheme for the package needs to be\n * checked when there is a major version update. However, minor and patch\n * versions are generally backward compatible, so they are handled more\n * leniently. By assuming that new minor versions are compatible, we avoid\n * unnecessary warnings and streamline the update process.\n *\n * If a new minor version introduces an additional subpath export within the\n * package of this version range, the corresponding package can add a more\n * specific version range that includes the new subpath. This design allows for\n * flexibility and ease of maintenance, ensuring that the latest features and\n * fixes are incorporated without extensive manual intervention.\n *\n * An additional subpath export within the package of this version range that\n * could cause the build to break if that new export is used, can be treated as\n * a bug fix. It might make more sense to our users that this new subpath isn't\n * supported yet until we address it as a bug fix. This approach helps maintain\n * stability and prevents unexpected issues during the build process.\n *\n * ## Structure\n * The `VendorImports` type is a nested object where:\n * - The keys at the first level represent the package names.\n * - The keys at the second level represent the version ranges (e.g., `^19.0.0`).\n * - The keys at the third level represent the subpaths within the package (e.g., `.` for the main entry point).\n * - The values at the third level are the relative paths to the corresponding entry points within the package.\n *\n * This structure allows for precise specification of the entry points for\n * different versions and subpaths, ensuring that the correct files are used\n * during the build process.\n */\ntype VendorImports = {\n  [packageName: string]: {\n    [versionRange: string]: {\n      [subpath: string]: string\n    }\n  }\n}\n\n// Define the vendor packages and their corresponding versions and entry points\nconst VENDOR_IMPORTS: VendorImports = {\n  'react': {\n    '^19.0.0': {\n      '.': './cjs/react.production.js',\n      './jsx-runtime': './cjs/react-jsx-runtime.production.js',\n      './jsx-dev-runtime': './cjs/react-jsx-dev-runtime.production.js',\n      './compiler-runtime': './cjs/react-compiler-runtime.production.js',\n      './package.json': './package.json',\n    },\n    '^18.0.0': {\n      '.': './cjs/react.production.min.js',\n      './jsx-runtime': './cjs/react-jsx-runtime.production.min.js',\n      './jsx-dev-runtime': './cjs/react-jsx-dev-runtime.production.min.js',\n      './package.json': './package.json',\n    },\n  },\n  'react-dom': {\n    '^19.0.0': {\n      '.': './cjs/react-dom.production.js',\n      './client': './cjs/react-dom-client.production.js',\n      './server': './cjs/react-dom-server-legacy.browser.production.js',\n      './server.browser': './cjs/react-dom-server-legacy.browser.production.js',\n      './static': './cjs/react-dom-server.browser.production.js',\n      './static.browser': './cjs/react-dom-server.browser.production.js',\n      './package.json': './package.json',\n    },\n    '^18.0.0': {\n      '.': './cjs/react-dom.production.min.js',\n      './client': './cjs/react-dom.production.min.js',\n      './server': './cjs/react-dom-server-legacy.browser.production.min.js',\n      './server.browser': './cjs/react-dom-server-legacy.browser.production.min.js',\n      './package.json': './package.json',\n    },\n  },\n  'styled-components': {\n    '^6.1.0': {\n      '.': './dist/styled-components.esm.js',\n      './package.json': './package.json',\n    },\n  },\n}\n\ninterface VendorBuildOptions {\n  cwd: string\n  outputDir: string\n  basePath: string\n}\n\n/**\n * Builds the ESM browser compatible versions of the vendor packages\n * specified in VENDOR_IMPORTS. Returns the `imports` object of an import map.\n */\nexport async function buildVendorDependencies({\n  cwd,\n  outputDir,\n  basePath,\n}: VendorBuildOptions): Promise<Record<string, string>> {\n  // normalize the CWD to a relative dir for better error messages\n  const dir = path.relative(process.cwd(), path.resolve(cwd))\n  const entry: Record<string, string> = {}\n  const imports: Record<string, string> = {}\n\n  // Iterate over each package and its version ranges in VENDOR_IMPORTS\n  for (const [packageName, ranges] of Object.entries(VENDOR_IMPORTS)) {\n    const packageJsonPath = resolveFrom.silent(cwd, path.join(packageName, 'package.json'))\n    if (!packageJsonPath) {\n      throw new Error(\n        `Could not find package.json for package '${packageName}' from directory '${dir}'. Is it installed?`,\n      )\n    }\n\n    let packageJson\n\n    try {\n      // Read and parse the package.json file\n      packageJson = JSON.parse(await fs.promises.readFile(packageJsonPath, 'utf-8'))\n    } catch (e) {\n      const message = `Could not read package.json for package '${packageName}' from directory '${dir}'`\n      if (typeof e?.message === 'string') {\n        // Re-assign the error message so the stack trace is more visible\n        e.message = `${message}: ${e.message}`\n        throw e\n      }\n\n      throw new Error(message, {cause: e})\n    }\n\n    // Coerce the version to a semver-compatible version\n    const version = semver.coerce(packageJson.version)?.version\n    if (!version) {\n      throw new Error(`Could not parse version '${packageJson.version}' from '${packageName}'`)\n    }\n\n    // Sort version ranges in descending order\n    const sortedRanges = Object.keys(ranges).sort((range1, range2) => {\n      const min1 = semver.minVersion(range1)\n      const min2 = semver.minVersion(range2)\n\n      if (!min1) throw new Error(`Could not parse range '${range1}'`)\n      if (!min2) throw new Error(`Could not parse range '${range2}'`)\n\n      // sort them in reverse so we can rely on array `.find` below\n      return semver.rcompare(min1.version, min2.version)\n    })\n\n    // Find the first version range that satisfies the package version\n    const matchedRange = sortedRanges.find((range) => semver.satisfies(version, range))\n\n    if (!matchedRange) {\n      const min = semver.minVersion(sortedRanges[sortedRanges.length - 1])\n      if (!min) {\n        throw new Error(`Could not find a minimum version for package '${packageName}'`)\n      }\n\n      if (semver.gt(min.version, version)) {\n        throw new Error(`Package '${packageName}' requires at least ${min.version}.`)\n      }\n\n      throw new Error(`Version '${version}' of package '${packageName}' is not supported yet.`)\n    }\n\n    const subpaths = ranges[matchedRange]\n\n    // Iterate over each subpath and its corresponding entry point\n    for (const [subpath, relativeEntryPoint] of Object.entries(subpaths)) {\n      const packagePath = path.dirname(packageJsonPath)\n      const entryPoint = resolveFrom.silent(packagePath, relativeEntryPoint)\n\n      if (!entryPoint) {\n        throw new Error(\n          `Failed to resolve entry point '${path.join(packageName, relativeEntryPoint)}'. `,\n        )\n      }\n\n      const specifier = path.posix.join(packageName, subpath)\n      const chunkName = path.posix.join(\n        packageName,\n        path.relative(packageName, specifier) || 'index',\n      )\n\n      entry[chunkName] = entryPoint\n      imports[specifier] = path.posix.join('/', basePath, VENDOR_DIR, `${chunkName}.mjs`)\n    }\n  }\n\n  // removes the `RollupWatcher` type\n  type BuildResult = Exclude<Awaited<ReturnType<typeof build>>, {close: unknown}>\n\n  const {build} = await import('vite')\n  // Use Vite to build the packages into the output directory\n  let buildResult = (await build({\n    // Define a custom cache directory so that sanity's vite cache\n    // does not conflict with any potential local vite projects\n    cacheDir: 'node_modules/.sanity/vite-vendor',\n    root: cwd,\n    configFile: false,\n    logLevel: 'silent',\n\n    appType: 'custom',\n    mode: 'production',\n    define: {'process.env.NODE_ENV': JSON.stringify('production')},\n\n    build: {\n      commonjsOptions: {strictRequires: 'auto'},\n      minify: true,\n      emptyOutDir: false, // Rely on CLI to do this\n      outDir: path.join(outputDir, VENDOR_DIR),\n      lib: {entry, formats: ['es']},\n      rollupOptions: {\n        external: createExternalFromImportMap({imports}),\n        output: {\n          entryFileNames: '[name]-[hash].mjs',\n          chunkFileNames: '[name]-[hash].mjs',\n          exports: 'named',\n          format: 'es',\n        },\n        treeshake: {preset: 'recommended'},\n      },\n    },\n  })) as BuildResult\n\n  buildResult = Array.isArray(buildResult) ? buildResult : [buildResult]\n\n  // Create a map of the original import specifiers to their hashed filenames\n  const hashedImports: Record<string, string> = {}\n  const output = buildResult.flatMap((i) => i.output)\n\n  for (const chunk of output) {\n    if (chunk.type === 'asset') continue\n\n    for (const [specifier, originalPath] of Object.entries(imports)) {\n      if (originalPath.endsWith(`${chunk.name}.mjs`)) {\n        hashedImports[specifier] = path.posix.join('/', basePath, VENDOR_DIR, chunk.fileName)\n      }\n    }\n  }\n\n  return hashedImports\n}\n","import path from 'node:path'\n\nimport resolveFrom from 'resolve-from'\nimport semver from 'semver'\n\nimport {type AutoUpdatesImportMap} from './getAutoUpdatesImportMap'\nimport {readPackageJson} from './readPackageJson'\n\nasync function getRemoteResolvedVersion(fetchFn: typeof fetch, url: string) {\n  try {\n    const res = await fetchFn(url, {method: 'HEAD', redirect: 'manual'})\n    return res.headers.get('x-resolved-version')\n  } catch (err) {\n    throw new Error(`Failed to fetch remote version for ${url}: ${err.message}`)\n  }\n}\n\ninterface CompareStudioDependencyVersions {\n  pkg: string\n  installed: string\n  remote: string\n}\n\n/**\n * Compares the versions of dependencies in the studio with their remote versions.\n *\n * This function reads the package.json file in the provided working directory, and compares the versions of the dependencies\n * specified in the `autoUpdatesImports` parameter with their remote versions. If the versions do not match, the dependency is\n * added to a list of failed dependencies, which is returned by the function.\n *\n * The failed dependencies are anything that does not strictly match the remote version.\n * This means that if a version is lower or greater by even a patch it will be marked as failed.\n *\n * @param autoUpdatesImports - An object mapping package names to their remote import URLs.\n * @param workDir - The path to the working directory containing the package.json file.\n * @param fetchFn - Optional {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API | Fetch}-compatible function to use for requesting the current remote version of a module\n *\n * @returns A promise that resolves to an array of objects, each containing\n * the name of a package whose local and remote versions do not match, along with the local and remote versions.\n *\n * @throws Throws an error if the remote version of a package cannot be fetched, or if the local version of a package\n * cannot be parsed.\n */\nexport async function compareStudioDependencyVersions(\n  autoUpdatesImports: AutoUpdatesImportMap,\n  workDir: string,\n  fetchFn = globalThis.fetch,\n): Promise<Array<CompareStudioDependencyVersions>> {\n  const manifest = readPackageJson(path.join(workDir, 'package.json'))\n  const dependencies = {...manifest.dependencies, ...manifest.devDependencies}\n\n  const failedDependencies: Array<CompareStudioDependencyVersions> = []\n\n  // Filter out the packages that are wildcards in the import map\n  const filteredAutoUpdatesImports = Object.entries(autoUpdatesImports).filter(\n    ([pkg]) => !pkg.endsWith('/'),\n  ) as Array<[string, string]>\n\n  for (const [pkg, value] of filteredAutoUpdatesImports) {\n    const resolvedVersion = await getRemoteResolvedVersion(fetchFn, value)\n\n    if (!resolvedVersion) {\n      throw new Error(`Failed to fetch remote version for ${value}`)\n    }\n\n    const dependency = dependencies[pkg]\n    const manifestPath = resolveFrom.silent(workDir, path.join(pkg, 'package.json'))\n\n    const installed = semver.coerce(\n      manifestPath ? readPackageJson(manifestPath).version : dependency,\n    )\n\n    if (!installed) {\n      throw new Error(`Failed to parse installed version for ${pkg}`)\n    }\n\n    if (!semver.eq(resolvedVersion, installed.version)) {\n      failedDependencies.push({pkg, installed: installed.version, remote: resolvedVersion})\n    }\n  }\n\n  return failedDependencies\n}\n","/**\n * @internal\n */\nexport interface AutoUpdatesImportMap {\n  'sanity': string\n  'sanity/': string\n  '@sanity/vision': string\n  '@sanity/vision/': string\n}\n\nconst MODULES_HOST =\n  process.env.SANITY_INTERNAL_ENV === 'staging'\n    ? 'https://sanity-cdn.work'\n    : 'https://sanity-cdn.com'\n\n/**\n * @internal\n */\nexport function getAutoUpdateImportMap(version: string): AutoUpdatesImportMap {\n  const timestamp = `t${Math.floor(Date.now() / 1000)}`\n\n  const autoUpdatesImports = {\n    'sanity': `${MODULES_HOST}/v1/modules/sanity/default/${version}/${timestamp}`,\n    'sanity/': `${MODULES_HOST}/v1/modules/sanity/default/${version}/${timestamp}/`,\n    '@sanity/vision': `${MODULES_HOST}/v1/modules/@sanity__vision/default/${version}/${timestamp}`,\n    '@sanity/vision/': `${MODULES_HOST}/v1/modules/@sanity__vision/default/${version}/${timestamp}/`,\n  }\n\n  return autoUpdatesImports\n}\n","import {type CliConfig} from '@sanity/cli'\n\nimport {type BuildSanityStudioCommandFlags} from '../actions/build/buildAction'\n\ninterface AutoUpdateSources {\n  flags: BuildSanityStudioCommandFlags\n  cliConfig?: CliConfig\n}\n\n/**\n * Compares parameters from various sources to determine whether or not to auto-update\n * @param sources - The sources of the auto-update parameter, including CLI flags and the CLI config\n * @returns boolean\n * @internal\n */\nexport function shouldAutoUpdate({flags, cliConfig}: AutoUpdateSources): boolean {\n  // cli flags (for example, '--no-auto-updates') should take precedence\n  if ('auto-updates' in flags) {\n    return Boolean(flags['auto-updates'])\n  }\n\n  if (cliConfig && 'autoUpdates' in cliConfig) {\n    return Boolean(cliConfig.autoUpdates)\n  }\n\n  return false\n}\n","import path from 'node:path'\n\nimport chalk from 'chalk'\nimport {info} from 'log-symbols'\nimport semver from 'semver'\nimport {noopLogger} from '@sanity/telemetry'\nimport {rimraf} from 'rimraf'\nimport type {CliCommandArguments, CliCommandContext} from '@sanity/cli'\n\nimport {buildStaticFiles, ChunkModule, ChunkStats} from '../../server'\nimport {checkStudioDependencyVersions} from '../../util/checkStudioDependencyVersions'\nimport {checkRequiredDependencies} from '../../util/checkRequiredDependencies'\nimport {getTimer} from '../../util/timing'\nimport {BuildTrace} from './build.telemetry'\nimport {buildVendorDependencies} from '../../server/buildVendorDependencies'\nimport {compareStudioDependencyVersions} from '../../util/compareStudioDependencyVersions'\nimport {getAutoUpdateImportMap} from '../../util/getAutoUpdatesImportMap'\nimport {shouldAutoUpdate} from '../../util/shouldAutoUpdate'\nimport {determineIsApp} from '../../util/determineIsApp'\n\nexport interface BuildSanityStudioCommandFlags {\n  'yes'?: boolean\n  'y'?: boolean\n  'minify'?: boolean\n  'stats'?: boolean\n  'source-maps'?: boolean\n  'auto-updates'?: boolean\n}\n\nexport default async function buildSanityStudio(\n  args: CliCommandArguments<BuildSanityStudioCommandFlags>,\n  context: CliCommandContext,\n  overrides?: {basePath?: string},\n): Promise<{didCompile: boolean}> {\n  const timer = getTimer()\n  const {output, prompt, workDir, cliConfig, telemetry = noopLogger} = context\n  const flags: BuildSanityStudioCommandFlags = {\n    'minify': true,\n    'stats': false,\n    'source-maps': false,\n    ...args.extOptions,\n  }\n\n  /**\n   * Unattended mode means that if there are any prompts it will use `YES` for them but will no change anything that doesn't have a prompt\n   */\n  const unattendedMode = Boolean(flags.yes || flags.y)\n  const defaultOutputDir = path.resolve(path.join(workDir, 'dist'))\n  const outputDir = path.resolve(args.argsWithoutOptions[0] || defaultOutputDir)\n  const isApp = determineIsApp(cliConfig)\n\n  await checkStudioDependencyVersions(workDir)\n\n  // If the check resulted in a dependency install, the CLI command will be re-run,\n  // thus we want to exit early\n  const {didInstall, installedSanityVersion} = await checkRequiredDependencies(context)\n  if (didInstall) {\n    return {didCompile: false}\n  }\n\n  const autoUpdatesEnabled = shouldAutoUpdate({flags, cliConfig})\n\n  // Get the version without any tags if any\n  const coercedSanityVersion = semver.coerce(installedSanityVersion)?.version\n  if (autoUpdatesEnabled && !coercedSanityVersion) {\n    throw new Error(`Failed to parse installed Sanity version: ${installedSanityVersion}`)\n  }\n  const version = encodeURIComponent(`^${coercedSanityVersion}`)\n  const autoUpdatesImports = getAutoUpdateImportMap(version)\n\n  if (autoUpdatesEnabled) {\n    output.print(`${info} Building with auto-updates enabled`)\n\n    // Check the versions\n    try {\n      const result = await compareStudioDependencyVersions(autoUpdatesImports, workDir)\n\n      // If it is in unattended mode, we don't want to prompt\n      if (result?.length && !unattendedMode) {\n        const shouldContinue = await prompt.single({\n          type: 'confirm',\n          message: chalk.yellow(\n            `The following local package versions are different from the versions currently served at runtime.\\n` +\n              `When using auto updates, we recommend that you test locally with the same versions before deploying. \\n\\n` +\n              `${result.map((mod) => ` - ${mod.pkg} (local version: ${mod.installed}, runtime version: ${mod.remote})`).join('\\n')} \\n\\n` +\n              `Continue anyway?`,\n          ),\n          default: false,\n        })\n\n        if (!shouldContinue) {\n          return process.exit(0)\n        }\n      }\n    } catch (err) {\n      throw err\n    }\n  }\n\n  const envVarKeys = getSanityEnvVars()\n  if (envVarKeys.length > 0) {\n    output.print(\n      '\\nIncluding the following environment variables as part of the JavaScript bundle:',\n    )\n    envVarKeys.forEach((key) => output.print(`- ${key}`))\n    output.print('')\n  }\n\n  let shouldClean = true\n  if (outputDir !== defaultOutputDir && !unattendedMode) {\n    shouldClean = await prompt.single({\n      type: 'confirm',\n      message: `Do you want to delete the existing directory (${outputDir}) first?`,\n      default: true,\n    })\n  }\n\n  // Determine base path for built studio\n  let basePath = '/'\n  const envBasePath = process.env.SANITY_STUDIO_BASEPATH\n  const configBasePath = cliConfig?.project?.basePath\n\n  // Allow `sanity deploy` to override base path\n  if (overrides?.basePath) {\n    basePath = overrides.basePath\n  } else if (envBasePath) {\n    // Environment variable (SANITY_STUDIO_BASEPATH)\n    basePath = envBasePath\n  } else if (configBasePath) {\n    // `sanity.cli.ts`\n    basePath = configBasePath\n  }\n\n  if (envBasePath && configBasePath) {\n    output.warn(\n      `Overriding configured base path (${configBasePath}) with value from environment variable (${envBasePath})`,\n    )\n  }\n\n  let spin\n\n  if (shouldClean) {\n    timer.start('cleanOutputFolder')\n    spin = output.spinner('Clean output folder').start()\n    await rimraf(outputDir)\n    const cleanDuration = timer.end('cleanOutputFolder')\n    spin.text = `Clean output folder (${cleanDuration.toFixed()}ms)`\n    spin.succeed()\n  }\n\n  spin = output.spinner(`Build Sanity ${isApp ? 'application' : 'Studio'}`).start()\n\n  const trace = telemetry.trace(BuildTrace)\n  trace.start()\n\n  let importMap\n\n  if (autoUpdatesEnabled) {\n    importMap = {\n      imports: {\n        ...(await buildVendorDependencies({cwd: workDir, outputDir, basePath})),\n        ...autoUpdatesImports,\n      },\n    }\n  }\n\n  try {\n    timer.start('bundleStudio')\n\n    const bundle = await buildStaticFiles({\n      cwd: workDir,\n      outputDir,\n      basePath,\n      sourceMap: Boolean(flags['source-maps']),\n      minify: Boolean(flags.minify),\n      vite: cliConfig && 'vite' in cliConfig ? cliConfig.vite : undefined,\n      importMap,\n      reactCompiler:\n        cliConfig && 'reactCompiler' in cliConfig ? cliConfig.reactCompiler : undefined,\n      entry: cliConfig && 'app' in cliConfig ? cliConfig.app?.entry : undefined,\n      isApp,\n    })\n\n    trace.log({\n      outputSize: bundle.chunks\n        .flatMap((chunk) => chunk.modules.flatMap((mod) => mod.renderedLength))\n        .reduce((sum, n) => sum + n, 0),\n    })\n    const buildDuration = timer.end('bundleStudio')\n\n    spin.text = `Build Sanity ${isApp ? 'application' : 'Studio'} (${buildDuration.toFixed()}ms)`\n    spin.succeed()\n\n    trace.complete()\n    if (flags.stats) {\n      output.print('\\nLargest module files:')\n      output.print(formatModuleSizes(sortModulesBySize(bundle.chunks).slice(0, 15)))\n    }\n  } catch (err) {\n    spin.fail()\n    trace.error(err)\n    throw err\n  }\n\n  return {didCompile: true}\n}\n\n// eslint-disable-next-line no-process-env\nfunction getSanityEnvVars(env: Record<string, string | undefined> = process.env): string[] {\n  return Object.keys(env).filter((key) => key.toUpperCase().startsWith('SANITY_STUDIO_'))\n}\n\nfunction sortModulesBySize(chunks: ChunkStats[]): ChunkModule[] {\n  return chunks\n    .flatMap((chunk) => chunk.modules)\n    .sort((modA, modB) => modB.renderedLength - modA.renderedLength)\n}\n\nfunction formatModuleSizes(modules: ChunkModule[]): string {\n  const lines: string[] = []\n  for (const mod of modules) {\n    lines.push(` - ${formatModuleName(mod.name)} (${formatSize(mod.renderedLength)})`)\n  }\n\n  return lines.join('\\n')\n}\n\nfunction formatModuleName(modName: string): string {\n  const delimiter = '/node_modules/'\n  const nodeIndex = modName.lastIndexOf(delimiter)\n  return nodeIndex === -1 ? modName : modName.slice(nodeIndex + delimiter.length)\n}\n\nfunction formatSize(bytes: number): string {\n  return chalk.cyan(`${(bytes / 1024).toFixed()} kB`)\n}\n"],"names":["BuildTrace","defineTrace","name","version","description","VENDOR_DIR","VENDOR_IMPORTS","buildVendorDependencies","cwd","outputDir","basePath","dir","path","relative","process","resolve","entry","imports","packageName","ranges","Object","entries","packageJsonPath","resolveFrom","silent","join","Error","packageJson","JSON","parse","fs","promises","readFile","e","message","cause","semver","coerce","sortedRanges","keys","sort","range1","range2","min1","minVersion","min2","rcompare","matchedRange","find","range","satisfies","min","length","gt","subpaths","subpath","relativeEntryPoint","packagePath","dirname","entryPoint","specifier","posix","chunkName","build","buildResult","cacheDir","root","configFile","logLevel","appType","mode","define","stringify","commonjsOptions","strictRequires","minify","emptyOutDir","outDir","lib","formats","rollupOptions","external","createExternalFromImportMap","output","entryFileNames","chunkFileNames","exports","format","treeshake","preset","Array","isArray","hashedImports","flatMap","i","chunk","type","originalPath","endsWith","fileName","getRemoteResolvedVersion","fetchFn","url","method","redirect","headers","get","err","compareStudioDependencyVersions","autoUpdatesImports","workDir","globalThis","fetch","manifest","readPackageJson","dependencies","devDependencies","failedDependencies","filteredAutoUpdatesImports","filter","pkg","value","resolvedVersion","dependency","manifestPath","installed","eq","push","remote","MODULES_HOST","env","SANITY_INTERNAL_ENV","getAutoUpdateImportMap","timestamp","Math","floor","Date","now","shouldAutoUpdate","flags","cliConfig","Boolean","autoUpdates","buildSanityStudio","args","context","overrides","timer","getTimer","prompt","telemetry","noopLogger","extOptions","unattendedMode","yes","y","defaultOutputDir","argsWithoutOptions","isApp","determineIsApp","checkStudioDependencyVersions","didInstall","installedSanityVersion","checkRequiredDependencies","didCompile","autoUpdatesEnabled","coercedSanityVersion","encodeURIComponent","print","info","result","single","chalk","yellow","map","mod","default","exit","envVarKeys","getSanityEnvVars","forEach","key","shouldClean","envBasePath","SANITY_STUDIO_BASEPATH","configBasePath","project","warn","spin","start","spinner","rimraf","cleanDuration","end","text","toFixed","succeed","trace","importMap","bundle","buildStaticFiles","sourceMap","vite","undefined","reactCompiler","app","log","outputSize","chunks","modules","renderedLength","reduce","sum","n","buildDuration","complete","stats","formatModuleSizes","sortModulesBySize","slice","fail","error","toUpperCase","startsWith","modA","modB","lines","formatModuleName","formatSize","modName","delimiter","nodeIndex","lastIndexOf","bytes","cyan"],"mappings":"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"}